El código que compartiste para el `DedicatedQueueEventBus` es una implementación sólida y bien estructurada, con colas dedicadas por componente, monitoreo activo, manejo de timeouts y soporte para eventos con respuesta. Sin embargo, hay áreas donde se puede mejorar para aumentar la eficiencia, robustez y mantenibilidad. A continuación, te detallo las mejoras propuestas y luego presento una versión optimizada del código.

---

### Áreas de mejora identificadas
1. **Gestión de excepciones más granular**: Hay bloques grandes de `try-except` que capturan excepciones genéricas (`Exception`), lo que podría ocultar errores específicos y dificultar la depuración.
2. **Optimización de recursos**: La creación de tareas y el manejo de colas podrían ser más eficientes, especialmente en sistemas con muchos componentes.
3. **Monitoreo más inteligente**: El monitoreo actual basado en inactividad podría complementarse con métricas adicionales (como tamaño de la cola o tasa de procesamiento) para detectar problemas más allá de la simple inactividad.
4. **Soporte para concurrencia**: El uso de `asyncio.Queue` es adecuado, pero podría beneficiarse de límites de tamaño para evitar acumulación excesiva de eventos.
5. **Limpieza más robusta**: El método `stop` podría garantizar que todas las tareas y recursos se liberen completamente, incluso en caso de errores.
6. **Documentación y tipado**: Aunque la documentación es buena, podría ser más específica en algunos puntos, y el uso de tipado podría ser más consistente.

---

### Mejoras propuestas
1. **Excepciones específicas**: Manejar excepciones como `asyncio.CancelledError`, `asyncio.TimeoutError` y otras de forma explícita.
2. **Colas con límites**: Usar colas con capacidad máxima para evitar que un componente lento acumule eventos indefinidamente.
3. **Monitoreo avanzado**: Añadir métricas como tamaño de cola y tasa de entrega para detectar cuellos de botella.
4. **Optimización de tareas**: Reutilizar tareas en lugar de recrearlas innecesariamente y reducir el overhead de callbacks.
5. **Limpieza asíncrona eficiente**: Mejorar `stop` para esperar la finalización de tareas con un timeout global.
6. **Interfaz más clara**: Simplificar el uso de `emit` y `emit_with_response` con parámetros opcionales más explícitos.

---

### Código mejorado

```python
"""
Bus de eventos mejorado con colas dedicadas para el sistema Genesis.

Este módulo implementa un bus de eventos optimizado que utiliza colas dedicadas por componente,
mecanismos de monitoreo avanzado y manejo eficiente de recursos para evitar deadlocks y timeouts.
"""

import asyncio
import logging
from collections import defaultdict
from typing import Dict, Any, Set, List, Optional, Callable, Coroutine
from time import time

# Configuración del logger
logger = logging.getLogger(__name__)

class DedicatedQueueEventBus:
    """
    Bus de eventos con colas dedicadas por componente para evitar bloqueos.
    
    Características:
    1. Colas dedicadas con límite de tamaño por componente
    2. Supervisión avanzada con métricas de salud y tamaño de cola
    3. Timeouts configurables y manejo granular de excepciones
    4. Limpieza eficiente de recursos al detenerse
    """

    def __init__(self, test_mode: bool = False, max_queue_size: int = 100):
        """
        Inicializar el bus de eventos con colas dedicadas.

        Args:
            test_mode: Usa timeouts más agresivos para pruebas si es True.
            max_queue_size: Tamaño máximo de cada cola de eventos.
        """
        self.component_queues: Dict[str, asyncio.Queue] = defaultdict(
            lambda: asyncio.Queue(maxsize=max_queue_size)
        )
        self.components: Dict[str, Any] = {}
        self.active_tasks: Dict[str, asyncio.Task] = {}  # Tareas por componente
        self.component_last_active: Dict[str, float] = {}
        self.component_health: Dict[str, bool] = {}
        self.status_callbacks: List[Callable[[str, bool], Coroutine]] = []

        # Configuración de timeouts
        self.test_mode = test_mode
        self.default_timeout = 0.5 if test_mode else 2.0
        self.restart_threshold = 1.0 if test_mode else 5.0

        self.running = True
        self.events_published = 0
        self.events_delivered = 0
        self.events_timed_out = 0
        self._loop = asyncio.get_event_loop()

    def attach_component(self, component_id: str, component: Any) -> None:
        """
        Registrar un componente en el bus.

        Args:
            component_id: ID único del componente.
            component: Instancia del componente con método handle_event.
        """
        if component_id in self.components:
            logger.warning(f"Componente {component_id} ya registrado, reemplazando")
        logger.debug(f"Registrando componente {component_id}")
        self.components[component_id] = component
        self.component_last_active[component_id] = time.time()
        self.component_health[component_id] = True
        self._start_processing_task(component_id)

    def _start_processing_task(self, component_id: str) -> None:
        """Iniciar tarea de procesamiento para un componente."""
        if component_id in self.active_tasks:
            self.active_tasks[component_id].cancel()
        task = self._loop.create_task(self._process_component_events(component_id))
        self.active_tasks[component_id] = task
        task.add_done_callback(lambda t: self.active_tasks.pop(component_id, None))

    async def _process_component_events(self, component_id: str) -> None:
        """Procesar eventos de un componente específico."""
        component = self.components.get(component_id)
        if not component:
            logger.warning(f"Componente {component_id} no encontrado")
            return

        queue = self.component_queues[component_id]
        logger.debug(f"Iniciando procesamiento para {component_id}")

        while self.running and component_id in self.components:
            try:
                event_type, data, source = await asyncio.wait_for(
                    queue.get(), timeout=self.default_timeout
                )
                start_time = time.time()

                try:
                    await asyncio.wait_for(
                        component.handle_event(event_type, data, source),
                        timeout=self.default_timeout
                    )
                    self.component_last_active[component_id] = time.time()
                    self.events_delivered += 1
                    queue.task_done()

                    if "response_to" in data and data.get("response_type"):
                        await self.emit(
                            data["response_type"],
                            {"response": True, "original_event": event_type},
                            component_id
                        )

                except asyncio.TimeoutError:
                    logger.warning(f"Timeout procesando evento {event_type} en {component_id}")
                    self.events_timed_out += 1
                    self._mark_unhealthy(component_id)
                    queue.task_done()

                except Exception as e:
                    logger.error(f"Error procesando evento {event_type} en {component_id}: {e}")
                    queue.task_done()

                if (time.time() - start_time) > 0.5:
                    logger.warning(f"Evento {event_type} en {component_id} tardó demasiado")

            except asyncio.TimeoutError:
                continue  # Cola vacía, seguir esperando
            except asyncio.QueueFull:
                logger.error(f"Cola llena para {component_id}, evento descartado")
                await asyncio.sleep(0.1)

    def _mark_unhealthy(self, component_id: str) -> None:
        """Marcar un componente como no saludable y notificar."""
        if self.component_health.get(component_id, True):
            self.component_health[component_id] = False
            logger.warning(f"Componente {component_id} marcado como no saludable")
            for callback in self.status_callbacks:
                asyncio.create_task(callback(component_id, False))

    async def emit(self, event_type: str, data: Dict[str, Any], source: str) -> None:
        """
        Emitir un evento a todos los componentes excepto el emisor.

        Args:
            event_type: Tipo de evento.
            data: Datos del evento.
            source: ID del componente emisor.
        """
        if not self.running:
            logger.warning(f"Bus detenido, evento {event_type} ignorado")
            return

        self.events_published += 1
        logger.debug(f"Emitiendo {event_type} desde {source}")

        if event_type.startswith("response.") and "target" in data:
            target = data["target"]
            if target in self.component_queues:
                await self.component_queues[target].put((event_type, data, source))
            return

        tasks = [
            queue.put((event_type, data, source))
            for cid, queue in self.component_queues.items()
            if cid != source
        ]
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    async def emit_with_response(
        self, event_type: str, data: Dict[str, Any], source: str, timeout: Optional[float] = None
    ) -> List[Dict[str, Any]]:
        """
        Emitir un evento y esperar respuestas.

        Args:
            event_type: Tipo de evento.
            data: Datos del evento.
            source: ID del componente emisor.
            timeout: Tiempo máximo de espera (opcional).

        Returns:
            Lista de respuestas recolectadas.
        """
        timeout = timeout or self.default_timeout
        if not self.running:
            return []

        response_queue = asyncio.Queue()
        response_id = f"resp_{time.time()}_{event_type}"
        event_data = data.copy()
        event_data.update({"response_to": source, "response_id": response_id, "response_type": f"response.{event_type}"})

        responses: List[Dict[str, Any]] = []
        expected_responses = len(self.components) - 1

        async def collect_responses():
            for _ in range(expected_responses):
                try:
                    response = await asyncio.wait_for(response_queue.get(), timeout=timeout)
                    responses.append(response)
                    response_queue.task_done()
                except asyncio.TimeoutError:
                    break

        collector = asyncio.create_task(collect_responses())
        await self.emit(event_type, event_data, source)
        await asyncio.wait_for(collector, timeout=timeout)
        return responses

    async def start_monitoring(self) -> None:
        """Iniciar monitoreo de componentes."""
        logger.info("Iniciando monitoreo")
        task = asyncio.create_task(self._monitor_components())
        self.active_tasks["monitor"] = task

    async def _monitor_components(self) -> None:
        """Monitorear salud de componentes y colas."""
        while self.running:
            current_time = time.time()
            for cid in list(self.components.keys()):
                inactive_time = current_time - self.component_last_active.get(cid, 0)
                queue_size = self.component_queues[cid].qsize()

                if inactive_time > self.restart_threshold or queue_size > 50:
                    logger.warning(f"{cid} inactivo por {inactive_time:.2f}s o cola llena ({queue_size})")
                    self._mark_unhealthy(cid)
                    self._start_processing_task(cid)  # Reiniciar tarea

            await asyncio.sleep(1.0 if self.test_mode else 2.0)

    def register_status_callback(self, callback: Callable[[str, bool], Coroutine]) -> None:
        """Registrar callback para cambios de estado."""
        self.status_callbacks.append(callback)

    async def stop(self) -> None:
        """Detener el bus y liberar recursos."""
        logger.info("Deteniendo bus de eventos")
        self.running = False

        for task in self.active_tasks.values():
            if not task.done():
                task.cancel()

        await asyncio.gather(*self.active_tasks.values(), return_exceptions=True)
        for queue in self.component_queues.values():
            while not queue.empty():
                queue.get_nowait()
                queue.task_done()

        logger.info(f"Eventos: publicados={self.events_published}, entregados={self.events_delivered}, timeouts={self.events_timed_out}")
```

---

### Cambios clave
1. **Colas con límite**: Se usa `max_queue_size` para evitar acumulación excesiva de eventos.
2. **Tareas por componente**: Las tareas se almacenan en un diccionario por `component_id`, facilitando reinicios específicos.
3. **Monitoreo avanzado**: Se considera el tamaño de la cola además de la inactividad para detectar problemas.
4. **Excepciones manejadas**: Se separan `TimeoutError`, `QueueFull`, etc., para un control más preciso.
5. **Limpieza eficiente**: `stop` usa `asyncio.gather` para esperar tareas con excepciones ignoradas.
6. **Optimización de `emit`**: Usa `return_exceptions=True` en `gather` para evitar fallos por colas llenas.

---

### ¿Cómo probarlo?
Puedes integrarlo en tu sistema Genesis y correr pruebas existentes. Si necesitas ajustes específicos (como cambiar el `max_queue_size` o añadir más métricas al monitoreo), házmelo saber. ¿Qué opinas de estas mejoras? ¿Hay algo más que quieras optimizar?