




















Analytics manager




import json
import logging
import os
from typing import Dict, Any, List, Optional
from collections import deque
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
from concurrent.futures import ThreadPoolExecutor
import asyncio
from aiofile import async_open  # Para operaciones asíncronas de I/O

# Configuración de logging
logger = logging.getLogger("AnalyticsManager")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()],
)


class AnalyticsManager:
    """
    Analiza el rendimiento de estrategias y genera gráficos de rendimiento de manera eficiente.
    """
    def __init__(self, historial_path: str = "data/performance.json", max_hist: int = 1000):
        self.historial_path = historial_path
        self.history: Dict[str, deque] = {}
        self.max_hist = max(0, max_hist)  # Evita valores negativos
        self.executor = ThreadPoolExecutor(max_workers=5)
        self.loop = asyncio.get_event_loop()
        if os.path.exists(historial_path):
            self.loop.run_until_complete(self._load_history())

    async def _load_history(self) -> None:
        """Carga el historial de manera asíncrona."""
        try:
            async with async_open(self.historial_path, "r") as f:
                data = json.loads(await f.read())
            self.history = {
                k: deque(v, maxlen=self.max_hist)
                for k, v in data.get("history", {}).items()
            }
            logger.info("Historial de rendimiento cargado correctamente.")
        except (json.JSONDecodeError, IOError) as e:
            logger.warning(f"No se pudo cargar historial: {type(e).__name__} - {e}")

    async def _save_history(self) -> None:
        """Guarda el historial de manera asíncrona."""
        try:
            os.makedirs(os.path.dirname(self.historial_path), exist_ok=True)
            async with async_open(self.historial_path, "w") as f:
                await f.write(
                    json.dumps(
                        {"history": {k: list(v) for k, v in self.history.items()}},
                        indent=2,
                    )
                )
        except (IOError, TypeError) as e:
            logger.error(f"Error al guardar historial: {type(e).__name__} - {e}")

    async def registrar_resultado(self, strategy_name: str, score: float) -> None:
        """Registra un resultado de forma asíncrona con validación."""
        if not isinstance(strategy_name, str) or not strategy_name.strip():
            raise ValueError("El nombre de la estrategia debe ser una cadena no vacía.")
        if not isinstance(score, (int, float)) or not (-float("inf") < score < float("inf")):
            raise ValueError("El score debe ser un número finito.")

        strategy_name = strategy_name.strip()
        if strategy_name not in self.history:
            self.history[strategy_name] = deque(maxlen=self.max_hist)
        self.history[strategy_name].append(
            {"timestamp": datetime.utcnow().isoformat(), "score": float(score)}
        )
        await self._save_history()

    def calcular_promedio(self, strategy_name: str) -> Optional[float]:
        """Calcula el promedio de puntajes de una estrategia."""
        hist = self.history.get(strategy_name)
        if not hist:
            return None
        # Usamos np.mean directamente para mayor eficiencia
        return float(np.mean([entry["score"] for entry in hist]))

    def estrategia_recomendada(self) -> Optional[str]:
        """Devuelve la estrategia con el mejor promedio."""
        if not self.history:
            return None
        
        # Usamos un diccionario de comprensión y max en una sola pasada
        promedios = {name: self.calcular_promedio(name) for name in self.history}
        validos = {k: v for k, v in promedios.items() if v is not None}
        if not validos:
            return None
        
        mejor = max(validos, key=validos.get)
        logger.info(f"Estrategia recomendada: {mejor} ({validos[mejor]:.4f})")
        return mejor

    def generar_grafico(self, strategy_name: str, output_path: Optional[str] = None) -> None:
        """Genera un gráfico del rendimiento de una estrategia."""
        hist = self.history.get(strategy_name)
        if not hist:
            logger.warning(f"No hay historial para {strategy_name}")
            return

        fechas = np.array([datetime.fromisoformat(d["timestamp"]) for d in hist])
        scores = np.array([d["score"] for d in hist])

        plt.figure(figsize=(10, 4))
        plt.plot(fechas, scores, marker="o", linestyle="-", color="b", label=strategy_name)
        plt.title(f"Rendimiento de {strategy_name}", fontsize=12, pad=10)
        plt.xlabel("Fecha", fontsize=10)
        plt.ylabel("Score", fontsize=10)
        plt.legend()
        plt.grid(True, linestyle="--", alpha=0.7)
        plt.tight_layout()

        if output_path:
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            plt.savefig(output_path, dpi=300, bbox_inches="tight")
            plt.close()  # Cierra la figura para liberar memoria
            logger.info(f"Gráfico guardado en {output_path}")
        else:
            plt.show()

    def obtener_historial(self, strategy_name: str) -> List[Dict[str, Any]]:
        """Devuelve el historial de una estrategia."""
        return list(self.history.get(strategy_name, []))


# Prueba rápida
async def main():
    analytics = AnalyticsManager()
    
    # Simulación asíncrona
    await asyncio.gather(
        analytics.registrar_resultado("sma_crossover", 0.82),
        analytics.registrar_resultado("sma_crossover", 0.67),
        analytics.registrar_resultado("rsi", 0.61),
        analytics.registrar_resultado("macd", 0.44),
    )

    mejor = analytics.estrategia_recomendada()
    print(f"Estrategia recomendada: {mejor}")

    # Graficar
    analytics.generar_grafico("sma_crossover", output_path="data/plots/sma_crossover.png")


if __name__ == "__main__":
    asyncio.run(main())


















Anomaly detector





import logging
import asyncio
import numpy as np
from typing import List, Dict, Optional, Callable
from datetime import datetime
from collections import deque
from sklearn.ensemble import IsolationForest
from system.email_notifier import EmailNotifier  # Asumo que existe este módulo

logger = logging.getLogger("AnomalyDetector")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()],
)


class AnomalyDetector:
    """
    Detecta spikes, spreads extremos, manipulación y errores en datos de mercado.
    Usa Isolation Forest y análisis estadístico para identificar anomalías en tiempo real.
    """
    def __init__(
        self,
        threshold: float = 3.0,
        window_size: int = 100,
        notifier: Optional[EmailNotifier] = None,
        contamination: float = 0.01,
        alert_interval: float = 300.0,
    ):
        self.price_history: Dict[str, deque] = {}
        self.threshold = max(0.1, float(threshold))  # Evita umbrales inválidos
        self.window_size = max(10, int(window_size))  # Mínimo razonable
        self.model = IsolationForest(
            n_estimators=100,
            contamination=max(0.001, min(0.5, contamination)),  # Rango válido
            random_state=42,
            n_jobs=-1,  # Usa todos los núcleos
        )
        self.notifier = notifier
        self.last_alert: Dict[str, float] = {}
        self.alert_interval = max(1.0, float(alert_interval))  # Mínimo 1 segundo
        self._min_samples = 20  # Mínimo para análisis estadístico/IA

    def _should_alert(self, symbol: str) -> bool:
        """Determina si se debe enviar una alerta según el intervalo."""
        now = datetime.utcnow().timestamp()
        last = self.last_alert.get(symbol, 0.0)
        if now - last >= self.alert_interval:
            self.last_alert[symbol] = now
            return True
        return False

    def update_price(self, symbol: str, price: float) -> None:
        """Actualiza el historial de precios con validación."""
        if not isinstance(symbol, str) or not symbol.strip():
            logger.debug(f"Symbol inválido: {symbol}")
            return
        if not isinstance(price, (int, float)) or price <= 0:
            logger.debug(f"Precio inválido para {symbol}: {price}")
            return

        symbol = symbol.strip()
        if symbol not in self.price_history:
            self.price_history[symbol] = deque(maxlen=self.window_size)
        self.price_history[symbol].append(float(price))

    async def detect(self, symbol: str) -> Optional[Dict[str, Any]]:
        """Detecta anomalías usando estadísticas y Isolation Forest."""
        hist = self.price_history.get(symbol)
        if not hist or len(hist) < self._min_samples:
            return None

        prices = np.array(hist, dtype=np.float32).reshape(-1, 1)
        current_price = prices[-1, 0]

        # Cálculo estadístico eficiente
        mean = np.mean(prices, axis=0)[0]
        std = np.std(prices, axis=0, ddof=1)[0]  # ddof=1 para muestra
        z_score = abs(current_price - mean) / (std + 1e-8)

        # Detección con IA
        try:
            prediction = self.model.fit_predict(prices)[-1]  # -1 es anomalía
        except ValueError as e:
            logger.warning(f"Error en IsolationForest para {symbol}: {e}")
            prediction = 1  # Normal si falla

        # Evaluar anomalía
        is_anomaly = z_score > self.threshold or prediction == -1
        if is_anomaly and self._should_alert(symbol):
            mensaje = (
                f"Anomalía detectada en {symbol}\n"
                f"Z-Score: {z_score:.2f}\n"
                f"Precio actual: {current_price:.2f}\n"
                f"Promedio: {mean:.2f}, STD: {std:.2f}\n"
                f"IA: {'Manipulación detectada' if prediction == -1 else 'Normal'}"
            )
            logger.warning(mensaje)
            if self.notifier:
                asyncio.create_task(  # No bloquea el flujo principal
                    self.notifier.enviar_email(
                        asunto=f"[ALERTA Genesis] Anomalía en {symbol}",
                        mensaje=mensaje,
                    )
                )
            return {
                "symbol": symbol,
                "z_score": float(z_score),
                "manipulacion": prediction == -1,
                "price": float(current_price),
                "mean": float(mean),
                "std": float(std),
                "mensaje": mensaje,
            }
        return None

    async def monitor(self, symbols: List[str], price_fetcher: Callable[[str], float]) -> None:
        """
        Monitorea símbolos en tiempo real detectando anomalías.
        Args:
            symbols: Lista de símbolos a monitorear.
            price_fetcher: Función asíncrona que devuelve el precio de un símbolo.
        """
        if not symbols or not callable(price_fetcher):
            logger.error("Lista de símbolos vacía o price_fetcher no válido")
            return

        while True:
            try:
                tasks = []
                for symbol in symbols:
                    try:
                        price = await price_fetcher(symbol)
                        if price is not None:
                            self.update_price(symbol, price)
                            tasks.append(self.detect(symbol))
                    except Exception as e:
                        logger.debug(f"Error al obtener precio de {symbol}: {e}")
                results = await asyncio.gather(*tasks, return_exceptions=True)
                for result in results:
                    if isinstance(result, Exception):
                        logger.debug(f"Error en detección: {result}")
                await asyncio.sleep(3.0)  # Intervalo configurable si se desea
            except asyncio.CancelledError:
                logger.info("Monitoreo cancelado")
                break
            except Exception as e:
                logger.error(f"Error en bucle de monitoreo: {e}")
                await asyncio.sleep(5.0)  # Pausa antes de reintentar


# Ejemplo de uso
async def dummy_price_fetcher(symbol: str) -> float:
    """Simulador de precios para pruebas."""
    return np.random.uniform(50, 150)


async def main():
    detector = AnomalyDetector(threshold=2.5, window_size=50)
    symbols = ["BTC/USD", "ETH/USD"]

    # Simular algunos datos iniciales
    for symbol in symbols:
        for _ in range(30):
            detector.update_price(symbol, await dummy_price_fetcher(symbol))

    # Iniciar monitoreo
    await detector.monitor(symbols, dummy_price_fetcher)


if __name__ == "__main__":
    asyncio.run(main()























Analyticmanager



import sqlite3
import json
import logging
import os
from typing import Dict, Any, List, Optional
from collections import deque
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
from concurrent.futures import ThreadPoolExecutor
import asyncio

logger = logging.getLogger("AnalyticsManager")
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

class AnalyticsManager:
    def __init__(self, db_path: str = "data/analytics.db", max_hist: int = 1000):
        self.db_path = db_path
        self.max_hist = max(0, max_hist)
        self.executor = ThreadPoolExecutor(max_workers=5)
        self._init_db()
        self.loop = asyncio.get_event_loop()

    def _init_db(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS performance (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    strategy_name TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    score REAL NOT NULL
                )
            """)
            conn.commit()

    async def registrar_resultado(self, strategy_name: str, score: float) -> None:
        if not isinstance(strategy_name, str) or not strategy_name.strip():
            raise ValueError("El nombre de la estrategia debe ser una cadena no vacía.")
        if not isinstance(score, (int, float)) or not (-float("inf") < score < float("inf")):
            raise ValueError("El score debe ser un número finito.")

        timestamp = datetime.utcnow().isoformat()
        await self.loop.run_in_executor(
            self.executor,
            lambda: self._insert_record(strategy_name, timestamp, score)
        )

    def _insert_record(self, strategy_name: str, timestamp: str, score: float):
        with sqlite3.connect(self.db_path) as conn:
            # Mantener solo los últimos max_hist registros por estrategia
            conn.execute("""
                DELETE FROM performance WHERE strategy_name = ? AND id NOT IN (
                    SELECT id FROM performance WHERE strategy_name = ? 
                    ORDER BY timestamp DESC LIMIT ?
                )
            """, (strategy_name, strategy_name, self.max_hist))
            conn.execute(
                "INSERT INTO performance (strategy_name, timestamp, score) VALUES (?, ?, ?)",
                (strategy_name, timestamp, score)
            )
            conn.commit()

    def calcular_promedio(self, strategy_name: str) -> Optional[float]:
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute(
                "SELECT AVG(score) FROM performance WHERE strategy_name = ?",
                (strategy_name,)
            )
            result = cursor.fetchone()[0]
            return float(result) if result is not None else None

    def estrategia_recomendada(self) -> Optional[str]:
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("""
                SELECT strategy_name, AVG(score) as avg_score 
                FROM performance 
                GROUP BY strategy_name 
                HAVING COUNT(*) > 0
            """)
            results = {row[0]: row[1] for row in cursor.fetchall()}
            if not results:
                return None
            best = max(results, key=results.get)
            logger.info(f"Estrategia recomendada: {best} ({results[best]:.4f})")
            return best

    def generar_grafico(self, strategy_name: str, output_path: Optional[str] = None) -> None:
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute(
                "SELECT timestamp, score FROM performance WHERE strategy_name = ? ORDER BY timestamp",
                (strategy_name,)
            )
            data = cursor.fetchall()
            if not data:
                logger.warning(f"No hay historial para {strategy_name}")
                return

        fechas = np.array([datetime.fromisoformat(row[0]) for row in data])
        scores = np.array([row[1] for row in data])

        plt.figure(figsize=(10, 4))
        plt.plot(fechas, scores, marker="o", linestyle="-", color="b", label=strategy_name)
        plt.title(f"Rendimiento de {strategy_name}", fontsize=12, pad=10)
        plt.xlabel("Fecha", fontsize=10)
        plt.ylabel("Score", fontsize=10)
        plt.legend()
        plt.grid(True, linestyle="--", alpha=0.7)
        plt.tight_layout()

        if output_path:
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            plt.savefig(output_path, dpi=300, bbox_inches="tight")
            plt.close()
            logger.info(f"Gráfico guardado en {output_path}")
        else:
            plt.show()

    def obtener_historial(self, strategy_name: str) -> List[Dict[str, Any]]:
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute(
                "SELECT timestamp, score FROM performance WHERE strategy_name = ? ORDER BY timestamp",
                (strategy_name,)
            )
            return [{"timestamp": row[0], "score": row[1]} for row in cursor.fetchall()]

async def main():
    analytics = AnalyticsManager()
    await asyncio.gather(
        analytics.registrar_resultado("sma_crossover", 0.82),
        analytics.registrar_resultado("sma_crossover", 0.67),
        analytics.registrar_resultado("rsi", 0.61),
        analytics.registrar_resultado("macd", 0.44),
    )
    print(f"Estrategia recomendada: {analytics.estrategia_recomendada()}")
    analytics.generar_grafico("sma_crossover", "data/plots/sma_crossover.png")

if __name__ == "__main__":
    asyncio.run(main())