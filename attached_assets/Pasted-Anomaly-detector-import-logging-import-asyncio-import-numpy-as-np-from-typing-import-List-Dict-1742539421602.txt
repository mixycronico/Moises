Anomaly detector





import logging
import asyncio
import numpy as np
from typing import List, Dict, Optional, Callable
from datetime import datetime
from collections import deque
from sklearn.ensemble import IsolationForest
from system.email_notifier import EmailNotifier  # Asumo que existe este módulo

logger = logging.getLogger("AnomalyDetector")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()],
)


class AnomalyDetector:
    """
    Detecta spikes, spreads extremos, manipulación y errores en datos de mercado.
    Usa Isolation Forest y análisis estadístico para identificar anomalías en tiempo real.
    """
    def __init__(
        self,
        threshold: float = 3.0,
        window_size: int = 100,
        notifier: Optional[EmailNotifier] = None,
        contamination: float = 0.01,
        alert_interval: float = 300.0,
    ):
        self.price_history: Dict[str, deque] = {}
        self.threshold = max(0.1, float(threshold))  # Evita umbrales inválidos
        self.window_size = max(10, int(window_size))  # Mínimo razonable
        self.model = IsolationForest(
            n_estimators=100,
            contamination=max(0.001, min(0.5, contamination)),  # Rango válido
            random_state=42,
            n_jobs=-1,  # Usa todos los núcleos
        )
        self.notifier = notifier
        self.last_alert: Dict[str, float] = {}
        self.alert_interval = max(1.0, float(alert_interval))  # Mínimo 1 segundo
        self._min_samples = 20  # Mínimo para análisis estadístico/IA

    def _should_alert(self, symbol: str) -> bool:
        """Determina si se debe enviar una alerta según el intervalo."""
        now = datetime.utcnow().timestamp()
        last = self.last_alert.get(symbol, 0.0)
        if now - last >= self.alert_interval:
            self.last_alert[symbol] = now
            return True
        return False

    def update_price(self, symbol: str, price: float) -> None:
        """Actualiza el historial de precios con validación."""
        if not isinstance(symbol, str) or not symbol.strip():
            logger.debug(f"Symbol inválido: {symbol}")
            return
        if not isinstance(price, (int, float)) or price <= 0:
            logger.debug(f"Precio inválido para {symbol}: {price}")
            return

        symbol = symbol.strip()
        if symbol not in self.price_history:
            self.price_history[symbol] = deque(maxlen=self.window_size)
        self.price_history[symbol].append(float(price))

    async def detect(self, symbol: str) -> Optional[Dict[str, Any]]:
        """Detecta anomalías usando estadísticas y Isolation Forest."""
        hist = self.price_history.get(symbol)
        if not hist or len(hist) < self._min_samples:
            return None

        prices = np.array(hist, dtype=np.float32).reshape(-1, 1)
        current_price = prices[-1, 0]

        # Cálculo estadístico eficiente
        mean = np.mean(prices, axis=0)[0]
        std = np.std(prices, axis=0, ddof=1)[0]  # ddof=1 para muestra
        z_score = abs(current_price - mean) / (std + 1e-8)

        # Detección con IA
        try:
            prediction = self.model.fit_predict(prices)[-1]  # -1 es anomalía
        except ValueError as e:
            logger.warning(f"Error en IsolationForest para {symbol}: {e}")
            prediction = 1  # Normal si falla

        # Evaluar anomalía
        is_anomaly = z_score > self.threshold or prediction == -1
        if is_anomaly and self._should_alert(symbol):
            mensaje = (
                f"Anomalía detectada en {symbol}\n"
                f"Z-Score: {z_score:.2f}\n"
                f"Precio actual: {current_price:.2f}\n"
                f"Promedio: {mean:.2f}, STD: {std:.2f}\n"
                f"IA: {'Manipulación detectada' if prediction == -1 else 'Normal'}"
            )
            logger.warning(mensaje)
            if self.notifier:
                asyncio.create_task(  # No bloquea el flujo principal
                    self.notifier.enviar_email(
                        asunto=f"[ALERTA Genesis] Anomalía en {symbol}",
                        mensaje=mensaje,
                    )
                )
            return {
                "symbol": symbol,
                "z_score": float(z_score),
                "manipulacion": prediction == -1,
                "price": float(current_price),
                "mean": float(mean),
                "std": float(std),
                "mensaje": mensaje,
            }
        return None

    async def monitor(self, symbols: List[str], price_fetcher: Callable[[str], float]) -> None:
        """
        Monitorea símbolos en tiempo real detectando anomalías.
        Args:
            symbols: Lista de símbolos a monitorear.
            price_fetcher: Función asíncrona que devuelve el precio de un símbolo.
        """
        if not symbols or not callable(price_fetcher):
            logger.error("Lista de símbolos vacía o price_fetcher no válido")
            return

        while True:
            try:
                tasks = []
                for symbol in symbols:
                    try:
                        price = await price_fetcher(symbol)
                        if price is not None:
                            self.update_price(symbol, price)
                            tasks.append(self.detect(symbol))
                    except Exception as e:
                        logger.debug(f"Error al obtener precio de {symbol}: {e}")
                results = await asyncio.gather(*tasks, return_exceptions=True)
                for result in results:
                    if isinstance(result, Exception):
                        logger.debug(f"Error en detección: {result}")
                await asyncio.sleep(3.0)  # Intervalo configurable si se desea
            except asyncio.CancelledError:
                logger.info("Monitoreo cancelado")
                break
            except Exception as e:
                logger.error(f"Error en bucle de monitoreo: {e}")
                await asyncio.sleep(5.0)  # Pausa antes de reintentar


# Ejemplo de uso
async def dummy_price_fetcher(symbol: str) -> float:
    """Simulador de precios para pruebas."""
    return np.random.uniform(50, 150)


async def main():
    detector = AnomalyDetector(threshold=2.5, window_size=50)
    symbols = ["BTC/USD", "ETH/USD"]

    # Simular algunos datos iniciales
    for symbol in symbols:
        for _ in range(30):
            detector.update_price(symbol, await dummy_price_fetcher(symbol))

    # Iniciar monitoreo
    await detector.monitor(symbols, dummy_price_fetcher)


if __name__ == "__main__":
    asyncio.run(main()


