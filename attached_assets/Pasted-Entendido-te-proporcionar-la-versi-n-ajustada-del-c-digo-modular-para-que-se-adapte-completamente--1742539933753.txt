Entendido, te proporcionaré la versión ajustada del código modular para que se adapte completamente a Genesis, manteniendo la estructura organizada y optimizada para su funcionamiento.

Estructura del Proyecto Ajustada a Genesis

genesis_project/
├── __init__.py
├── config.py
├── db_manager.py
├── models/
│   ├── __init__.py
│   └── user_model.py
├── utils/
│   ├── __init__.py
│   └── db_utils.py
├── analytics/
│   ├── __init__.py
│   └── anomaly_detector.py
├── core/
│   ├── __init__.py
│   ├── core_functions.py
├── main.py
└── system/
    ├── __init__.py
    └── email_notifier.py

1. config.py

# config.py
import os

class DatabaseConfig:
    """Database configuration settings for Genesis"""
    def __init__(self):
        self.DB_HOST = os.getenv("DB_HOST", "localhost")
        self.DB_NAME = os.getenv("DB_NAME", "genesis")
        self.DB_USER = os.getenv("DB_USER", "postgres")
        self.DB_PASSWORD = os.getenv("DB_PASSWORD", "password")
        self.DB_PORT = os.getenv("DB_PORT", "5432")
        self.MIN_CONN = 1
        self.MAX_CONN = 20

2. db_manager.py

# db_manager.py
import logging
import psycopg2
from psycopg2 import pool
from contextlib import contextmanager
from typing import List, Dict, Any, Optional
from .config import DatabaseConfig

logger = logging.getLogger("DatabaseManager")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("genesis_database.log")
    ]
)

class DatabaseManager:
    """PostgreSQL database manager with connection pooling"""
    
    def __init__(self, config: DatabaseConfig = None):
        self.config = config or DatabaseConfig()
        self.pool = None
        self._initialize_pool()

    def _initialize_pool(self):
        """Initialize connection pool"""
        try:
            self.pool = psycopg2.pool.SimpleConnectionPool(
                self.config.MIN_CONN,
                self.config.MAX_CONN,
                host=self.config.DB_HOST,
                database=self.config.DB_NAME,
                user=self.config.DB_USER,
                password=self.config.DB_PASSWORD,
                port=self.config.DB_PORT
            )
            logger.info("Genesis Database connection pool initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize connection pool: {e}")
            raise

    @contextmanager
    def _get_connection(self):
        """Get a connection from the pool with context management"""
        conn = None
        try:
            conn = self.pool.getconn()
            yield conn
        except Exception as e:
            logger.error(f"Error getting connection: {e}")
            raise
        finally:
            if conn:
                self.pool.putconn(conn)

    @contextmanager
    def _get_cursor(self):
        """Get a cursor with context management"""
        with self._get_connection() as conn:
            with conn.cursor() as cursor:
                yield cursor
                conn.commit()

    def execute_query(self, query: str, params: tuple = None) -> None:
        """Execute a modification query (INSERT, UPDATE, DELETE)"""
        try:
            with self._get_cursor() as cursor:
                cursor.execute(query, params)
                logger.info(f"Query executed successfully: {query[:50]}...")
        except Exception as e:
            logger.error(f"Error executing query: {e}")
            raise

    def fetch_query(self, query: str, params: tuple = None) -> List[Dict[str, Any]]:
        """Execute a SELECT query and return results"""
        try:
            with self._get_cursor() as cursor:
                cursor.execute(query, params)
                columns = [desc[0] for desc in cursor.description]
                results = cursor.fetchall()
                return [dict(zip(columns, row)) for row in results]
        except Exception as e:
            logger.error(f"Error fetching query: {e}")
            raise

    def close(self):
        """Close the connection pool"""
        if self.pool:
            self.pool.closeall()
            logger.info("Genesis Database connection pool closed")

3. models/user_model.py

# models/user_model.py
from typing import List, Dict, Any
from ..db_manager import DatabaseManager

class UserModel:
    """User model for Genesis database operations"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.table_name = "users"
        self._create_table()

    def _create_table(self):
        """Create users table if not exists"""
        query = f"""
            CREATE TABLE IF NOT EXISTS {self.table_name} (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                email VARCHAR(255) UNIQUE NOT NULL,
                capital DECIMAL(15,2) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """
        self.db_manager.execute_query(query)

    def add_user(self, name: str, email: str, capital: float) -> None:
        """Add a new user"""
        query = f"""
            INSERT INTO {self.table_name} (name, email, capital)
            VALUES (%s, %s, %s)
        """
        params = (name, email, capital)
        self.db_manager.execute_query(query, params)

    def get_user_by_email(self, email: str) -> List[Dict[str, Any]]:
        """Get user by email"""
        query = f"""
            SELECT id, name, email, capital, created_at, updated_at
            FROM {self.table_name}
            WHERE email = %s
        """
        return self.db_manager.fetch_query(query, (email,))

    def update_user(self, user_id: int, capital: float) -> None:
        """Update user capital"""
        query = f"""
            UPDATE {self.table_name}
            SET capital = %s,
                updated_at = CURRENT_TIMESTAMP
            WHERE id = %s
        """
        params = (capital, user_id)
        self.db_manager.execute_query(query, params)

    def delete_user(self, user_id: int) -> None:
        """Delete user"""
        query = f"""
            DELETE FROM {self.table_name}
            WHERE id = %s
        """
        self.db_manager.execute_query(query, (user_id,))

4. utils/db_utils.py

# utils/db_utils.py
from typing import List, Dict, Any
from ..db_manager import DatabaseManager

class DatabaseUtils:
    """Database utility functions for Genesis"""
    
    @staticmethod
    def check_database_exists(db_manager: DatabaseManager, db_name: str) -> bool:
        """Check if database exists"""
        query = "SELECT 1 FROM pg_database WHERE datname = %s"
        result = db_manager.fetch_query(query, (db_name,))
        return len(result) > 0

    @staticmethod
    def get_table_count(db_manager: DatabaseManager, table_name: str) -> int:
        """Get row count of a table"""
        query = f"SELECT COUNT(*) FROM {table_name}"
        result = db_manager.fetch_query(query)
        return result[0]["count"] if result else 0

5. analytics/anomaly_detector.py

# analytics/anomaly_detector.py
import logging
import numpy as np
from sklearn.ensemble import IsolationForest
from typing import List, Dict, Any, Optional
from collections import deque
from datetime import datetime
from system.email_notifier import EmailNotifier

logger = logging.getLogger("AnomalyDetector")

class AnomalyDetector:
    """
    Detects market data anomalies such as spikes, spreads, and manipulation.
    Uses Isolation Forest and statistical analysis for anomaly detection in real-time.
    """
    def __init__(self, threshold: float = 3.0, window_size: int = 100, notifier: Optional[EmailNotifier] = None):
        self.price_history: Dict[str, deque] = {}
        self.threshold = threshold
        self.window_size = window_size
        self.model = IsolationForest(n_estimators=100, contamination=0.01, random_state=42)
        self.notifier = notifier

    def update_price(self, symbol: str, price: float) -> None:
        """Update price history"""
        if symbol not in self.price_history:
            self.price_history[symbol] = deque(maxlen=self.window_size)
        self.price_history[symbol].append(price)

    async def detect(self, symbol: str) -> Optional[Dict[str, Any]]:
        """Detect anomalies in price data"""
        prices = np.array(self.price_history.get(symbol, []))
        if len(prices) < self.window_size:
            return None

        prediction = self.model.fit_predict(prices.reshape(-1, 1))
        is_anomaly = prediction[-1] == -1

        if is_anomaly and self.notifier:
            message = f"Anomaly detected in {symbol} at {datetime.utcnow().isoformat()}"
            await self.notifier.send_alert(message)
            return {"symbol": symbol, "anomaly": True}

        return None

6. system/email_notifier.py

# system/email_notifier.py
import smtplib
from email.mime.text import MIMEText
from typing import Optional

class EmailNotifier:
    """Class to send email notifications"""
    
    def __init__(self, smtp_server: str, smtp_port: int, from_email: str, password: str):
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
        self.from_email = from_email
        self.password = password

    async def send_alert(self, message: str, to_email: Optional[str] = None) -> None:
        """Send email alert"""
        msg = MIMEText(message)
        msg['Subject'] = "Genesis Alert"
        msg['From'] = self.from_email
        msg['To'] = to_email or self.from_email

        with smtplib.SMTP_SSL(self.smtp_server, self.smtp_port) as server:
            server.login(self.from_email, self.password)
            server.sendmail(self.from_email, to_email or self.from_email, msg.as_string())
            server.quit()

7. main.py

# main.py
import logging
from genesis_project.db_manager import DatabaseManager
from genesis_project.models.user_model import UserModel
from genesis_project.utils.db_utils import DatabaseUtils
from genesis_project.analytics.anomaly_detector import AnomalyDetector
from system.email_notifier import EmailNotifier

logger = logging.getLogger(__name__)

def main():
    try:
        # Initialize database manager
        db_manager = DatabaseManager()
        
        # Initialize user model
        user_model = UserModel(db_manager)

        # Add a user
        user