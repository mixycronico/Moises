# genesis/analysis/indicators.py
import numpy as np
from typing import List, Tuple, Union
import logging

logger = logging.getLogger(__name__)

class Indicators:
    """Clase para calcular indicadores técnicos optimizados para trading."""

    def __init__(self):
        """Inicializa la clase con configuraciones por defecto."""
        self.min_periods = 1  # Mínimo de períodos para cálculos válidos

    def calculate_ema(self, prices: List[float], period: int) -> List[float]:
        """Calcula la Media Móvil Exponencial (EMA) con optimización numpy."""
        if not isinstance(period, int) or period <= 0:
            raise ValueError("Period must be a positive integer")
        if len(prices) < period:
            raise ValueError(f"Not enough data for EMA period {period}, got {len(prices)} prices")
        
        prices_array = np.array(prices, dtype=np.float64)
        alpha = 2 / (period + 1)
        ema = np.zeros_like(prices_array)
        ema[0] = prices_array[0]  # Valor inicial
        
        for i in range(1, len(prices_array)):
            ema[i] = alpha * prices_array[i] + (1 - alpha) * ema[i - 1]
        
        logger.debug(f"EMA calculated for period {period}: {ema[-1]}")
        return ema.tolist()

    def calculate_rsi(self, prices: List[float], period: int = 14) -> float:
        """Calcula el Índice de Fuerza Relativa (RSI) con optimización numpy."""
        if not isinstance(period, int) or period <= 0:
            raise ValueError("Period must be a positive integer")
        if len(prices) < period + 1:
            raise ValueError(f"Not enough data for RSI period {period}, got {len(prices)} prices")
        
        prices_array = np.array(prices, dtype=np.float64)
        deltas = np.diff(prices_array)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)
        
        avg_gain = np.mean(gains[:period])
        avg_loss = np.mean(losses[:period])
        
        if avg_loss == 0:
            rsi = 100.0 if avg_gain > 0 else 50.0  # Evita división por cero
        else:
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
        
        # Actualización incremental para los períodos restantes
        for i in range(period, len(deltas)):
            avg_gain = (avg_gain * (period - 1) + gains[i]) / period
            avg_loss = (avg_loss * (period - 1) + losses[i]) / period
            if avg_loss == 0:
                rsi = 100.0 if avg_gain > 0 else 50.0
            else:
                rs = avg_gain / avg_loss
                rsi = 100 - (100 / (1 + rs))
        
        logger.debug(f"RSI calculated for period {period}: {rsi}")
        return rsi

    def calculate_macd(self, prices: List[float], fast: int = 12, slow: int = 26, signal_period: int = 9) -> Tuple[List[float], List[float]]:
        """Calcula MACD (línea MACD y señal) con optimización numpy."""
        if not all(isinstance(p, int) and p > 0 for p in [fast, slow, signal_period]):
            raise ValueError("All periods must be positive integers")
        if fast >= slow:
            raise ValueError("Fast period must be less than slow period")
        if len(prices) < slow:
            raise ValueError(f"Not enough data for MACD slow period {slow}, got {len(prices)} prices")
        
        ema_fast = self.calculate_ema(prices, fast)
        ema_slow = self.calculate_ema(prices, slow)
        
        macd_line = np.array(ema_fast) - np.array(ema_slow)
        signal_line = self.calculate_ema(macd_line.tolist(), signal_period)
        
        logger.debug(f"MACD calculated: last MACD={macd_line[-1]}, last Signal={signal_line[-1]}")
        return macd_line.tolist(), signal_line.tolist()

    def calculate_adx(self, highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> float:
        """Calcula el Índice Direccional Promedio (ADX) con optimización numpy."""
        if not isinstance(period, int) or period <= 0:
            raise ValueError("Period must be a positive integer")
        if len(highs) < period + 1 or len(lows) != len(highs) or len(closes) != len(highs):
            raise ValueError(f"Not enough or mismatched data for ADX period {period}")
        
        highs_array = np.array(highs, dtype=np.float64)
        lows_array = np.array(lows, dtype=np.float64)
        closes_array = np.array(closes, dtype=np.float64)
        
        plus_dm = np.maximum(highs_array[1:] - highs_array[:-1], 0)
        minus_dm = np.maximum(lows_array[:-1] - lows_array[1:], 0)
        tr = np.maximum(highs_array[1:] - lows_array[1:], np.abs(highs_array[1:] - closes_array[:-1]))
        tr = np.maximum(tr, np.abs(lows_array[1:] - closes_array[:-1]))
        
        atr = np.mean(tr[:period])
        plus_di = 100 * np.mean(plus_dm[:period]) / atr if atr > 0 else 0
        minus_di = 100 * np.mean(minus_dm[:period]) / atr if atr > 0 else 0
        
        dx = 100 * abs(plus_di - minus_di) / (plus_di + minus_di) if (plus_di + minus_di) > 0 else 0
        adx = dx  # Valor inicial
        
        for i in range(period, len(tr)):
            atr = (atr * (period - 1) + tr[i]) / period
            plus_di = 100 * ((plus_dm[i - period:i].mean() * (period - 1) + plus_dm[i]) / period) / atr
            minus_di = 100 * ((minus_dm[i - period:i].mean() * (period - 1) + minus_dm[i]) / period) / atr
            dx = 100 * abs(plus_di - minus_di) / (plus_di + minus_di) if (plus_di + minus_di) > 0 else 0
            adx = (adx * (period - 1) + dx) / period
        
        logger.debug(f"ADX calculated for period {period}: {adx}")
        return adx

    def calculate_atr(self, highs: List[float], lows: List[float], closes: List[float], period: int = 14) -> float:
        """Calcula el Average True Range (ATR) con optimización numpy."""
        if not isinstance(period, int) or period <= 0:
            raise ValueError("Period must be a positive integer")
        if len(highs) < period + 1 or len(lows) != len(highs) or len(closes) != len(highs):
            raise ValueError(f"Not enough or mismatched data for ATR period {period}")
        
        highs_array = np.array(highs, dtype=np.float64)
        lows_array = np.array(lows, dtype=np.float64)
        closes_array = np.array(closes, dtype=np.float64)
        
        tr = np.maximum(highs_array[1:] - lows_array[1:], np.abs(highs_array[1:] - closes_array[:-1]))
        tr = np.maximum(tr, np.abs(lows_array[1:] - closes_array[:-1]))
        atr = np.mean(tr[-period:])
        
        logger.debug(f"ATR calculated for period {period}: {atr}")
        return atr