Strategy orcherstator





import logging
import time
import asyncio
import random
from typing import Dict, Any, List
from collections import deque
from concurrent.futures import ThreadPoolExecutor

# Configuración de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# Simulación de dependencias mínimas
class Strategy:
    def __init__(self, name, config):
        self.name = name
        self.config = config

    def generate_signal(self, market):
        return random.choice(["buy", "sell", "hold"])  # Simulación simple

class StrategyFactory:
    def create_strategy(self, name, config):
        return Strategy(name, config)

class MarketData:
    def get_data(self, trading_pair):
        if random.random() < 0.1:  # 10% de fallo simulado
            return None
        # Simulación de datos extremos
        return {"prices": [50000 * (1 + random.uniform(-0.5, 0.5)) for _ in range(10)]}

class PerformanceTracker:
    def __init__(self):
        self.scores = {}

    def log_performance(self, name, score):
        self.scores[name] = score

    def get_last_score(self, name):
        return self.scores.get(name)

class PaperTrader:
    def __init__(self, market_data, capital):
        self.market_data = market_data
        self.capital = capital

    def simulate(self, strategy, trading_pair):
        market = self.market_data.get_data(trading_pair)
        if not market:
            return {"performance_score": 0}
        signal = strategy.generate_signal(market)
        # Simulación simple de rendimiento
        return {"performance_score": random.uniform(0, 1) if signal != "hold" else 0.2}

class RiskManager:
    def __init__(self, config):
        self.config = config

# StrategyOrchestrator Mejorado
class StrategyOrchestrator:
    def __init__(self, strategy_configs: Dict[str, Dict[str, Any]], 
                 market_data, capital: float, config: Dict[str, Any]):
        self.strategy_configs = strategy_configs
        self.market_data = market_data
        self.capital = capital
        self.config = config
        self.active_strategy_name = list(strategy_configs.keys())[0]
        self.factory = StrategyFactory()
        self.performance = PerformanceTracker()
        self.paper_trader = PaperTrader(self.market_data, self.capital)
        self.risk_manager = RiskManager(config.get("risk_management", {}))
        self.strategy_instances = {
            name: self.factory.create_strategy(name, cfg)
            for name, cfg in strategy_configs.items()
        }
        self.history = deque(maxlen=1000)  # Historial limitado
        self.executor = ThreadPoolExecutor(max_workers=10)  # Evaluación paralela
        self.min_performance_threshold = config.get("min_performance_threshold", 0.4)
        self.eval_cooldown = 60  # Cooldown en segundos para reevaluaciones
        self.last_eval_time = 0
        self.eval_failures = 0
        self.max_eval_failures = 5  # Circuit breaker

    async def evaluate_strategies(self, trading_pair: str) -> str:
        """Evalúa todas las estrategias y selecciona la mejor."""
        if time.time() - self.last_eval_time < self.eval_cooldown:
            logging.info("Evaluación en cooldown. Usando estrategia activa.")
            return self.active_strategy_name

        if self.eval_failures >= self.max_eval_failures:
            logging.critical("Demasiados fallos en evaluación. Manteniendo estrategia activa.")
            return self.active_strategy_name

        scores = {}
        tasks = []
        for name, strategy in self.strategy_instances.items():
            tasks.append(self._simulate_strategy(name, strategy, trading_pair))

        try:
            results = await asyncio.gather(*tasks)
            for name, result in results:
                scores[name] = result.get("performance_score", 0)
                self.performance.log_performance(name, scores[name])
        except Exception as e:
            self.eval_failures += 1
            logging.error(f"Fallo en evaluación de estrategias: {e}")
            return self.active_strategy_name

        if not scores:
            self.eval_failures += 1
            return self.active_strategy_name

        best_strategy = max(scores, key=scores.get)
        logging.info(f"Estrategia más efectiva: {best_strategy} (score: {scores[best_strategy]:.4f})")
        self.last_eval_time = time.time()
        self.eval_failures = 0  # Resetear fallos tras éxito
        return best_strategy

    async def _simulate_strategy(self, name: str, strategy, trading_pair: str):
        """Simula una estrategia en un hilo separado."""
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(self.executor, self.paper_trader.simulate, strategy, trading_pair)
        return name, result

    async def get_signal(self, trading_pair: str) -> str:
        """Obtiene señal de la mejor estrategia en este momento."""
        try:
            market = self.market_data.get_data(trading_pair)
            if not market or not market.get("prices"):
                logging.warning("Datos de mercado no disponibles o inválidos.")
                return "hold"

            # Re-evaluar si el rendimiento es bajo
            current_perf = self.performance.get_last_score(self.active_strategy_name)
            if current_perf is not None and current_perf < self.min_performance_threshold:
                logging.warning(f"Bajo rendimiento de {self.active_strategy_name} ({current_perf:.2f}). Reevaluando...")
                self.active_strategy_name = await self.evaluate_strategies(trading_pair)

            strategy = self.strategy_instances[self.active_strategy_name]
            signal = strategy.generate_signal(market)
            logging.info(f"Señal generada por {self.active_strategy_name}: {signal}")

            # Verificar volatilidad extrema
            volatility = max(market["prices"]) / min(market["prices"]) - 1
            if volatility > 0.3:  # Pausar si volatilidad > 30%
                logging.critical(f"Volatilidad extrema detectada ({volatility:.2%}). Señal forzada a 'hold'.")
                signal = "hold"

            self.history.append((time.time(), self.active_strategy_name, signal))
            return signal

        except Exception as e:
            logging.error(f"Error en StrategyOrchestrator: {e}")
            return "hold"

    def force_change_strategy(self, new_name: str):
        if new_name in self.strategy_instances:
            self.active_strategy_name = new_name
            logging.info(f"Estrategia cambiada manualmente a: {new_name}")
        else:
            logging.warning(f"Estrategia {new_name} no está registrada.")

    def get_active_strategy(self) -> str:
        return self.active_strategy_name

    def get_strategy_history(self) -> List:
        return list(self.history)

    async def stress_test(self, trading_pairs: List[str], num_iterations: int):
        """Prueba de estrés con múltiples pares y señales."""
        tasks = []
        for _ in range(num_iterations):
            for pair in trading_pairs:
                tasks.append(self.get_signal(pair))
        results = await asyncio.gather(*tasks)
        signals = {"buy": 0, "sell": 0, "hold": 0}
        for signal in results:
            signals[signal] += 1
        return signals

# Prueba
if __name__ == "__main__":
    config = {
        "min_performance_threshold": 0.4,
        "risk_management": {}
    }
    strategy_configs = {
        "sma_crossover": {"short_window": 5, "long_window": 20},
        "rsi": {"period": 14},
        "macd": {"fast": 12, "slow": 26}
    }
    market_data = MarketData()
    orchestrator = StrategyOrchestrator(strategy_configs, market_data, 10000, config)

    # Prueba simple
    signal = asyncio.run(orchestrator.get_signal("BTC/USDT"))
    print(f"Señal simple: {signal}")

    # Prueba de estrés
    print("\nIniciando prueba de estrés...")
    trading_pairs = ["BTC/USDT", "ETH/USDT", "XRP/USDT"]
    stress_results = asyncio.run(orchestrator.stress_test(trading_pairs, 50))
    print(f"Resultados de estrés: {stress_results}")


















Performance tracker




import logging
import asyncio
import time
from typing import Dict, List, Optional
from datetime import datetime
from collections import deque
from concurrent.futures import ThreadPoolExecutor
import json
import os

# Configuración de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

class PerformanceTracker:
    """
    Rastrea el rendimiento de las estrategias a lo largo del tiempo.
    Guarda el puntaje de rendimiento más reciente y el historial de evaluaciones.
    """

    def __init__(self, max_history: int = 1000, persist_path: Optional[str] = None):
        self.scores: Dict[str, float] = {}  # Último rendimiento de cada estrategia
        self.history: Dict[str, deque] = {}  # Historial completo
        self.max_history = max_history
        self.persist_path = persist_path  # Ruta para persistencia en disco
        self.lock = asyncio.Lock()  # Bloqueo para concurrencia
        self.logger = logging.getLogger("PerformanceTracker")
        self.executor = ThreadPoolExecutor(max_workers=10)  # Para operaciones I/O
        self.max_strategies = 10000  # Límite de estrategias
        self.cleanup_threshold = 0.9  # Limpieza cuando se alcanza 90% de max_strategies
        if persist_path and os.path.exists(persist_path):
            self._load_from_disk()

    async def log_performance(self, strategy_name: str, score: float):
        """
        Registra un nuevo puntaje de rendimiento para una estrategia.
        """
        if not isinstance(strategy_name, str) or not strategy_name.strip():
            self.logger.error("Nombre de estrategia inválido.")
            raise ValueError("Strategy name must be a non-empty string")
        if not isinstance(score, (int, float)) or not 0 <= score <= 1:
            self.logger.error(f"Puntaje inválido: {score}")
            raise ValueError("Score must be a number between 0 and 1")

        async with self.lock:
            self.scores[strategy_name] = score
            if strategy_name not in self.history:
                if len(self.scores) >= self.max_strategies * self.cleanup_threshold:
                    await self._cleanup_inactive_strategies()
                self.history[strategy_name] = deque(maxlen=self.max_history)
            self.history[strategy_name].append({
                "timestamp": datetime.utcnow().isoformat(),
                "score": score
            })
            self.logger.info(f"Rendimiento registrado: {strategy_name} → {score:.4f}")

            # Persistencia en disco
            if self.persist_path:
                await self._save_to_disk()

    async def get_last_score(self, strategy_name: str) -> Optional[float]:
        """
        Retorna el último puntaje de una estrategia.
        """
        if not isinstance(strategy_name, str) or not strategy_name.strip():
            return None
        async with self.lock:
            return self.scores.get(strategy_name)

    async def get_history(self, strategy_name: str) -> List[Dict[str, Any]]:
        """
        Retorna el historial completo de rendimiento para una estrategia.
        """
        if not isinstance(strategy_name, str) or not strategy_name.strip():
            return []
        async with self.lock:
            return list(self.history.get(strategy_name, []))

    async def get_all_strategies(self) -> List[str]:
        """
        Retorna la lista de estrategias registradas.
        """
        async with self.lock:
            return list(self.scores.keys())

    async def _cleanup_inactive_strategies(self):
        """Elimina estrategias con puntajes antiguos o bajos."""
        current_time = datetime.utcnow()
        async with self.lock:
            to_remove = []
            for strategy, hist in self.history.items():
                if not hist or (datetime.fromisoformat(hist[-1]["timestamp"]) < 
                                current_time - timedelta(days=7)):
                    to_remove.append(strategy)
            for strategy in to_remove:
                self.logger.info(f"Eliminando estrategia inactiva: {strategy}")
                del self.scores[strategy]
                del self.history[strategy]

    async def _save_to_disk(self):
        """Guarda el estado en disco."""
        loop = asyncio.get_event_loop()
        data = {
            "scores": self.scores,
            "history": {k: list(v) for k, v in self.history.items()}
        }
        await loop.run_in_executor(self.executor, self._write_to_file, data)

    def _write_to_file(self, data):
        with open(self.persist_path, "w") as f:
            json.dump(data, f)

    def _load_from_disk(self):
        """Carga el estado desde disco."""
        try:
            with open(self.persist_path, "r") as f:
                data = json.load(f)
            self.scores = data["scores"]
            self.history = {k: deque(v, maxlen=self.max_history) for k, v in data["history"].items()}
            self.logger.info("Estado cargado desde disco.")
        except Exception as e:
            self.logger.error(f"Error al cargar desde disco: {e}")

    async def stress_test(self, num_strategies: int, num_logs_per_strategy: int):
        """Prueba de estrés con registro masivo y accesos concurrentes."""
        tasks = []
        strategy_names = [f"strategy_{i}" for i in range(num_strategies)]

        # Registro masivo
        for name in strategy_names:
            for _ in range(num_logs_per_strategy):
                tasks.append(self.log_performance(name, random.uniform(0, 1)))

        # Accesos concurrentes
        for name in strategy_names:
            tasks.append(self.get_last_score(name))
            tasks.append(self.get_history(name))
        tasks.append(self.get_all_strategies())

        start_time = time.time()
        await asyncio.gather(*tasks)
        elapsed = time.time() - start_time
        self.logger.info(f"Prueba de estrés completada en {elapsed:.2f}s")

# Prueba
if __name__ == "__main__":
    from datetime import timedelta
    tracker = PerformanceTracker(max_history=1000, persist_path="performance.json")

    # Prueba simple
    asyncio.run(tracker.log_performance("sma_crossover", 0.75))
    last_score = asyncio.run(tracker.get_last_score("sma_crossover"))
    history = asyncio.run(tracker.get_history("sma_crossover"))
    print(f"Último puntaje: {last_score}")
    print(f"Historial: {history}")

    # Prueba de estrés
    print("\nIniciando prueba de estrés...")
    asyncio.run(tracker.stress_test(num_strategies=100, num_logs_per_strategy=100))

Solo agregale eso de la base de datos bb






















Balance Manager





import logging
import asyncio
import random
from typing import Dict, Any, Optional
from datetime import datetime
from collections import defaultdict, deque
from concurrent.futures import ThreadPoolExecutor
import json
import os
from asyncio import Semaphore

# Logging básico
logger = logging.getLogger("BalanceManager")
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# Simulación de API Client
class SimulatedClient:
    async def get_balances(self):
        await asyncio.sleep(random.uniform(0.1, 2))  # Latencia extrema
        if random.random() < 0.3:  # 30% de fallo
            raise Exception("Simulated API failure")
        return {f"{random.choice(['USDT', 'BTC', 'ETH'])}": random.uniform(0, 1000) for _ in range(random.randint(1, 10))}

class BalanceManager:
    def __init__(self, api_clients: Dict[str, Any], base_currency: str = "USDT", persist_path: Optional[str] = "balances.json"):
        self.api_clients = api_clients
        self.base_currency = base_currency
        self.balances: Dict[str, Dict[str, float]] = defaultdict(dict)
        self.history: Dict[str, deque] = defaultdict(lambda: deque(maxlen=1000))  # Historial limitado
        self.lock = asyncio.Lock()
        self.executor = ThreadPoolExecutor(max_workers=50)  # Para operaciones concurrentes
        self.persist_path = persist_path
        self.failure_counts = defaultdict(int)
        self.max_failures = 5  # Circuit breaker
        self.semaphore = Semaphore(100)  # Limita concurrencia
        self.min_operational_exchanges = 1  # Mínimo para seguir funcionando
        if persist_path and os.path.exists(persist_path):
            self._load_from_disk()

    async def update_balances(self):
        """Actualiza balances en todos los exchanges en paralelo."""
        async with self.lock:
            tasks = []
            operational_exchanges = 0
            for exchange_name, client in self.api_clients.items():
                if self.failure_counts[exchange_name] >= self.max_failures:
                    logger.warning(f"{exchange_name} en circuit breaker. Saltando.")
                    continue
                operational_exchanges += 1
                tasks.append(self._fetch_balance(exchange_name, client))

            if operational_exchanges < self.min_operational_exchanges:
                logger.critical("No hay suficientes exchanges operativos. Pausando actualizaciones.")
                return

            results = await asyncio.gather(*tasks, return_exceptions=True)
            for exchange_name, result in zip([e for e in self.api_clients if self.failure_counts[e] < self.max_failures], results):
                if isinstance(result, Exception):
                    self.failure_counts[exchange_name] += 1
                    logger.warning(f"Error en {exchange_name}: {result}")
                else:
                    self.balances[exchange_name] = result
                    self.history[exchange_name].append({
                        "timestamp": datetime.utcnow().isoformat(),
                        "balances": result
                    })
                    self.failure_counts[exchange_name] = 0  # Resetear si éxito
                    logger.info(f"[{exchange_name}] Balance actualizado: {result}")

            if self.persist_path:
                await self._save_to_disk()

    async def _fetch_balance(self, exchange_name: str, client):
        """Obtiene balance con límite de concurrencia."""
        async with self.semaphore:
            return await client.get_balances()

    async def get_balance(self, exchange: str, symbol: str) -> float:
        """Retorna el balance actual de un símbolo específico."""
        if not exchange or not symbol:
            return 0.0
        async with self.lock:
            return self.balances.get(exchange, {}).get(symbol.upper(), 0.0)

    async def get_total_balance_usdt(self, price_feed: Dict[str, float]) -> float:
        """Calcula el balance total estimado en USDT."""
        if not price_feed:
            logger.warning("Price feed vacío. Retornando 0.")
            return 0.0
        total = 0.0
        async with self.lock:
            for exchange, symbols in self.balances.items():
                for symbol, amount in symbols.items():
                    if symbol == self.base_currency:
                        total += amount
                    elif symbol in price_feed and price_feed[symbol] > 0:
                        total += amount * price_feed[symbol]
                    else:
                        logger.debug(f"Precio no disponible para {symbol} en {exchange}")
        return round(total, 4)

    def get_balance_snapshot(self) -> Dict[str, Dict[str, float]]:
        """Devuelve una copia actual del estado de balances."""
        return {ex: dict(bals) for ex, bals in self.balances.items()}

    def get_balance_history(self, exchange: str) -> list:
        """Retorna el historial de balances para un exchange."""
        return list(self.history.get(exchange, []))

    async def start_balance_updater(self, interval: int = 30):
        """Inicia actualización automática de balances."""
        while True:
            await self.update_balances()
            await asyncio.sleep(interval)

    async def _save_to_disk(self):
        """Guarda balances en disco."""
        loop = asyncio.get_event_loop()
        data = {
            "balances": self.balances,
            "history": {k: list(v) for k, v in self.history.items()}
        }
        await loop.run_in_executor(self.executor, self._write_to_file, data)

    def _write_to_file(self, data):
        with open(self.persist_path, "w") as f:
            json.dump(data, f)

    def _load_from_disk(self):
        """Carga balances desde disco."""
        try:
            with open(self.persist_path, "r") as f:
                data = json.load(f)
            self.balances = defaultdict(dict, data["balances"])
            self.history = defaultdict(lambda: deque(maxlen=1000), 
                                     {k: deque(v, maxlen=1000) for k, v in data["history"].items()})
            logger.info("Balances cargados desde disco.")
        except Exception as e:
            logger.error(f"Error al cargar desde disco: {e}")

    async def stress_test(self, num_exchanges: int, num_iterations: int):
        """Prueba de estrés con múltiples exchanges y actualizaciones."""
        # Simular muchos exchanges
        self.api_clients = {f"exchange_{i}": SimulatedClient() for i in range(num_exchanges)}
        tasks = [self.update_balances() for _ in range(num_iterations)]
        
        # Simular price feed volátil
        price_feed = {"BTC": random.uniform(20000, 80000), "ETH": random.uniform(1000, 5000), "USDT": 1.0}
        
        start_time = time.time()
        await asyncio.gather(*tasks)
        total_usdt = await self.get_total_balance_usdt(price_feed)
        elapsed = time.time() - start_time
        logger.info(f"Prueba de estrés completada en {elapsed:.2f}s. Total USDT: {total_usdt}")

# Prueba
if __name__ == "__main__":
    api_clients = {"binance": SimulatedClient(), "bybit": SimulatedClient()}
    balance_manager = BalanceManager(api_clients)

    # Prueba simple
    asyncio.run(balance_manager.update_balances())
    price_feed = {"BTC": 50000, "ETH": 3000, "USDT": 1.0}
    total = asyncio.run(balance_manager.get_total_balance_usdt(price_feed))
    print(f"Total USDT: {total}")
    print(f"Snapshot: {balance_manager.get_balance_snapshot()}")

    # Prueba de ultra estrés
    print("\nIniciando prueba de ultra estrés...")
    asyncio.run(balance_manager.stress_test(num_exchanges=1000, num_iterations=10))











