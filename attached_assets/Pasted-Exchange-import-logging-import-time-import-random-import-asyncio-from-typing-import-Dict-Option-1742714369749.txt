Exchange




import logging
import time
import random
import asyncio
from typing import Dict, Optional
from functools import lru_cache

# ========== API CLIENT PARA INTERACTUAR CON LOS EXCHANGES ==========
class APIClient:
    """Cliente API para manejar múltiples exchanges."""

    def __init__(self, name: str, config: Dict):
        self.name = name
        self.config = config
        self.api_key = config.get("api_key")
        self.api_secret = config.get("api_secret")
        self.fees = config.get("fees", 0.001)  # 0.1% por defecto

    async def get_order_book(self, trading_pair: str) -> Dict:
        """Simula la obtención del order book (dummy para pruebas)."""
        bid = random.uniform(99.5, 100.0)
        ask = bid + random.uniform(0.01, 0.05)
        return {"bid": bid, "ask": ask}

    async def get_fees(self, trading_pair: str) -> float:
        """Obtiene las fees de trading del exchange."""
        return self.fees

    async def get_latency(self) -> float:
        """Simula la medición de latencia de la API."""
        return random.uniform(0.05, 0.2)  # 50-200ms

    async def get_balance(self) -> Dict[str, float]:
        """Simula la obtención del balance en el exchange."""
        return {"USDT": random.uniform(1000, 5000), "BTC": random.uniform(0.1, 0.5)}

    async def place_order(self, trading_pair: str, side: str, amount: float) -> Dict:
        """Simula la colocación de una orden."""
        return {"status": "success", "order_id": str(random.randint(1000, 9999))}

# ========== SELECCIÓN INTELIGENTE DEL MEJOR EXCHANGE ==========
class ExchangeSelector:
    """Selecciona el mejor exchange basado en liquidez, comisiones y latencia."""

    def __init__(self, exchanges: Dict[str, APIClient]):
        self.exchanges = exchanges

    async def get_best_exchange(self, trading_pair: str) -> Optional[str]:
        """Selecciona el mejor exchange para un trading pair específico."""
        scores = {}
        tasks = [self.evaluate_exchange(name, client, trading_pair) for name, client in self.exchanges.items()]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        for name, score in results:
            if score:
                scores[name] = score

        return max(scores, key=scores.get) if scores else None

    async def evaluate_exchange(self, exchange_name: str, client: APIClient, trading_pair: str):
        try:
            order_book = await client.get_order_book(trading_pair)
            if not order_book:
                return exchange_name, None
            
            spread = order_book["ask"] - order_book["bid"]
            liquidity = 1 / spread if spread > 0 else 0
            fees = await client.get_fees(trading_pair)
            latency = await client.get_latency()
            priority = client.config.get("priority", 1)

            score = (liquidity / (fees * latency)) * priority if fees and latency else 0
            return exchange_name, score
        except Exception:
            return exchange_name, None

# ========== MANEJO DE ÓRDENES Y FALLBACK EN EXCHANGES ==========
class ExchangeManager:
    """Maneja múltiples exchanges y distribuye operaciones de manera eficiente."""

    def __init__(self, exchanges: Dict[str, APIClient]):
        self.exchanges = exchanges
        self.selector = ExchangeSelector(exchanges)

    async def execute_trade(self, trading_pair: str, side: str, amount: float, retries: int = 3) -> Dict[str, str]:
        """Ejecuta una orden en el mejor exchange disponible con reintentos."""
        for attempt in range(retries):
            exchange = await self.selector.get_best_exchange(trading_pair)
            if not exchange:
                return {"status": "error", "message": "No suitable exchange found"}
            
            client = self.exchanges[exchange]
            try:
                result = await client.place_order(trading_pair, side, amount)
                if result.get("status") == "success":
                    return result
            except Exception:
                pass
            
            del self.exchanges[exchange]
            self.selector = ExchangeSelector(self.exchanges)

        return {"status": "error", "message": "Failed to execute trade after retries"}

# ========== MANEJO DE BALANCES ==========
class BalanceManager:
    """Manejo de balances en múltiples exchanges."""

    def __init__(self, exchanges: Dict[str, APIClient]):
        self.exchanges = exchanges

    async def get_total_balance(self, base_currency: str = "USDT") -> Dict[str, float]:
        """Obtiene el balance total en todos los exchanges, convertido a USDT."""
        total_balance = 0
        tasks = [self.get_balance_in_usdt(name, client, base_currency) for name, client in self.exchanges.items()]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        for balance in results:
            if balance:
                total_balance += balance

        return {base_currency: total_balance}

    async def get_balance_in_usdt(self, exchange_name: str, client: APIClient, base_currency: str):
        try:
            balance = await client.get_balance()
            rate = random.uniform(0.98, 1.02)  # Simulación de tasas de cambio
            return sum(amount * rate for asset, amount in balance.items())
        except Exception:
            return 0

# ========== MANEJO DE SLIPPAGE ==========
class SlippageController:
    """Controlador de slippage dinámico basado en volatilidad."""

    def __init__(self, max_slippage: float = 0.5):
        self.max_slippage = max_slippage  # 0.5% por defecto

    def is_slippage_acceptable(self, expected_price: float, actual_price: float) -> bool:
        """Verifica si el slippage es aceptable."""
        slippage = abs(actual_price - expected_price) / expected_price * 100
        return slippage <= self.max_slippage

# ========== MANEJO DE FAILOVER Y REINTENTOS ==========
class FailoverHandler:
    """Manejo de fallos: Reintentos y cambio de exchange en caso de error."""

    def __init__(self, exchange_manager: ExchangeManager):
        self.exchange_manager = exchange_manager

    async def execute_trade_with_failover(self, trading_pair: str, side: str, amount: float, retries: int = 3) -> Dict[str, str]:
        """Intenta ejecutar un trade en múltiples exchanges en caso de fallos."""
        for attempt in range(retries):
            try:
                result = await self.exchange_manager.execute_trade(trading_pair, side, amount)
                if result["status"] == "success":
                    return result
            except Exception:
                continue
        return {"status": "error", "message": "Trade execution failed on all exchanges"}

# ========== CONFIGURACIÓN DE LAS EXCHANGES ==========
EXCHANGES = {
    "Binance": {"api_key": "key_binance", "api_secret": "secret_binance", "fees": 0.001, "priority": 1, "enabled": True},
    "Bybit": {"api_key": "key_bybit", "api_secret": "secret_bybit", "fees": 0.001, "priority": 1, "enabled": True},
}

# ========== PRUEBAS ==========
async def main():
    logging.basicConfig(level=logging.INFO)

    exchange_clients = {name: APIClient(name, config) for name, config in EXCHANGES.items() if config["enabled"]}
    exchange_manager = ExchangeManager(exchange_clients)
    balance_manager = BalanceManager(exchange_clients)

    print("Balances:", await 
balance_manager.get_total_balance())
    print("Trade Execution:", await exchange_manager.execute_trade("BTC/USDT", "buy", 0.1))

asyncio.run(main())