¡Claro que sí! No soy malito, jeje. Te voy a dar un conjunto aún más grande de medidores, sumando 10 adicionales a los 10 que ya hice, para que tengas un total de 20 opciones espectaculares. Todos seguirán la misma estética futurista, simétrica y profesional que ya tienes en tu `ProgressCircle`, con gradientes, "glow", y animaciones fluidas. Los pondré todos juntos en un solo archivo para que los tengas listos para usar.

---

### **`frontend/components/Gauges.tsx` (20 Medidores)**

```tsx
import { motion } from "framer-motion";
import { useState, useEffect } from "react";

interface GaugeProps {
  label: string;
  value: number;
  max?: number;
  color?: string;
}

// 1. Classic Progress Circle
const ProgressCircle: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <circle className="text-[#2A3A54] stroke-current" strokeWidth="10" cx="50" cy="50" r="40" fill="transparent" />
          <motion.circle
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="10"
            strokeLinecap="round"
            cx="50"
            cy="50"
            r="40"
            fill="transparent"
            strokeDasharray="251.2"
            strokeDashoffset={251.2 - (251.2 * percentage) / 100}
            initial={{ strokeDashoffset: 251.2 }}
            animate={{ strokeDashoffset: 251.2 - (251.2 * percentage) / 100 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 2. Half Circle Gauge
const HalfCircleGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 180;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-10 sm:w-24 sm:h-12 overflow-hidden">
        <svg className="w-full h-full" viewBox="0 0 100 50">
          <path className="text-[#2A3A54] stroke-current" strokeWidth="10" d="M 10 40 A 30 30 0 0 1 90 40" fill="transparent" />
          <motion.path
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="10"
            strokeLinecap="round"
            d="M 10 40 A 30 30 0 0 1 90 40"
            fill="transparent"
            strokeDasharray="188.5"
            strokeDashoffset={188.5 - (188.5 * percentage) / 180}
            initial={{ strokeDashoffset: 188.5 }}
            animate={{ strokeDashoffset: 188.5 - (188.5 * percentage) / 180 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div
          className="absolute top-0 left-0 w-full h-full flex items-end justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 3. Radial Bar Gauge
const RadialBarGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 360;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ rotate: [0, 360] }}
        transition={{ duration: 10, repeat: Infinity, ease: "linear" }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <circle className="text-[#2A3A54] stroke-current" strokeWidth="15" cx="50" cy="50" r="35" fill="transparent" />
          <motion.circle
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="15"
            cx="50"
            cy="50"
            r="35"
            fill="transparent"
            strokeDasharray="219.9"
            strokeDashoffset={219.9 - (219.9 * percentage) / 360}
            initial={{ strokeDashoffset: 219.9 }}
            animate={{ strokeDashoffset: 219.9 - (219.9 * percentage) / 360 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div className="absolute inset-0 flex items-center justify-center text-lg font-semibold">{value}</motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 4. Vertical Bar Gauge
const VerticalBarGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scaleY: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-10 h-20 sm:w-12 sm:h-24">
        <div className="w-full h-full bg-[#2A3A54] rounded-lg" />
        <motion.div
          className={`absolute bottom-0 w-full bg-gradient-to-t ${color} rounded-lg`}
          initial={{ height: 0 }}
          animate={{ height: `${percentage}%` }}
          transition={{ duration: 1.5, ease: "easeInOut" }}
        />
        <motion.div
          className="absolute top-0 left-0 w-full h-full flex items-center justify-center text-lg font-semibold"
          animate={{ y: -percentage / 2 }}
          transition={{ duration: 1.5, ease: "easeInOut" }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 5. Horizontal Bar Gauge
const HorizontalBarGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scaleX: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-8 sm:w-24 sm:h-10">
        <div className="w-full h-full bg-[#2A3A54] rounded-lg" />
        <motion.div
          className={`absolute left-0 h-full bg-gradient-to-r ${color} rounded-lg`}
          initial={{ width: 0 }}
          animate={{ width: `${percentage}%` }}
          transition={{ duration: 1.5, ease: "easeInOut" }}
        />
        <motion.div className="absolute top-0 left-0 w-full h-full flex items-center justify-center text-lg font-semibold">
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 6. Pulsating Dot Gauge
const PulsatingDotGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.2, 1] }}
        transition={{ duration: 1.5, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <motion.div
          className={`w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-gradient-to-br ${color} absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2`}
          animate={{ scale: [1, 1 + percentage / 100, 1] }}
          transition={{ duration: 2, repeat: Infinity }}
        />
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 7. Spiral Gauge
const SpiralGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 720;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ rotate: [0, 360] }}
        transition={{ duration: 5, repeat: Infinity, ease: "linear" }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <motion.path
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="5"
            fill="transparent"
            d="M50 50 L50 10 A40 40 0 1 1 50 90 A40 40 0 1 1 50 10"
            strokeDasharray="502.4"
            strokeDashoffset={502.4 - (502.4 * percentage) / 720}
            initial={{ strokeDashoffset: 502.4 }}
            animate={{ strokeDashoffset: 502.4 - (502.4 * percentage) / 720 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div className="absolute inset-0 flex items-center justify-center text-xl font-semibold">{value}</motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 8. Wave Gauge
const WaveGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scaleY: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24 overflow-hidden rounded-full">
        <motion.div
          className={`absolute bottom-0 w-full h-full bg-gradient-to-t ${color}`}
          initial={{ y: "100%" }}
          animate={{ y: `${100 - percentage}%` }}
          transition={{ duration: 1.5, ease: "easeInOut" }}
          style={{ clipPath: "polygon(0 100%, 100% 100%, 100% 80%, 80% 90%, 60% 80%, 40% 90%, 20% 80%, 0 90%)" }}
        />
        <div className="absolute inset-0 bg-[#2A3A54] opacity-50 rounded-full" />
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 9. Orbit Gauge
const OrbitGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 360;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ rotate: [0, 360] }}
        transition={{ duration: 8, repeat: Infinity, ease: "linear" }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <circle className="text-[#2A3A54] stroke-current" strokeWidth="5" cx="50" cy="50" r="45" fill="transparent" />
          <motion.circle
            className="text-[#FFD700] stroke-current"
            strokeWidth="5"
            cx="50"
            cy="50"
            r="10"
            fill="transparent"
            initial={{ rotate: 0 }}
            animate={{ rotate: percentage }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div
          className={`absolute top-1/2 left-1/2 w-8 h-8 bg-gradient-to-br ${color} rounded-full transform -translate-x-1/2 -translate-y-1/2`}
          animate={{ rotate: percentage }}
          transition={{ duration: 1.5, ease: "easeInOut" }}
        />
        <motion.div className="absolute inset-0 flex items-center justify-center text-xl font-semibold">{value}</motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 10. Hexagon Gauge
const HexagonGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <polygon
            className="text-[#2A3A54] stroke-current"
            strokeWidth="10"
            points="50,15 85,35 85,65 50,85 15,65 15,35"
            fill="transparent"
          />
          <motion.polygon
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="10"
            points="50,15 85,35 85,65 50,85 15,65 15,35"
            fill="transparent"
            strokeDasharray="240"
            strokeDashoffset={240 - (240 * percentage) / 100}
            initial={{ strokeDashoffset: 240 }}
            animate={{ strokeDashoffset: 240 - (240 * percentage) / 100 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 11. Dual Ring Gauge
const DualRingGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 360;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <circle className="text-[#2A3A54] stroke-current" strokeWidth="8" cx="50" cy="50" r="45" fill="transparent" />
          <motion.circle
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="8"
            cx="50"
            cy="50"
            r="45"
            fill="transparent"
            strokeDasharray="282.7"
            strokeDashoffset={282.7 - (282.7 * percentage) / 360}
            initial={{ strokeDashoffset: 282.7 }}
            animate={{ strokeDashoffset: 282.7 - (282.7 * percentage) / 360 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
          <circle className="text-[#2A3A54] stroke-current" strokeWidth="8" cx="50" cy="50" r="30" fill="transparent" />
          <motion.circle
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="8"
            cx="50"
            cy="50"
            r="30"
            fill="transparent"
            strokeDasharray="188.5"
            strokeDashoffset={188.5 - (188.5 * percentage) / 360}
            initial={{ strokeDashoffset: 188.5 }}
            animate={{ strokeDashoffset: 188.5 - (188.5 * percentage) / 360 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div className="absolute inset-0 flex items-center justify-center text-xl font-semibold">{value}</motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 12. Triangle Gauge
const TriangleGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <polygon
            className="text-[#2A3A54] stroke-current"
            strokeWidth="10"
            points="50,20 90,80 10,80"
            fill="transparent"
          />
          <motion.polygon
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="10"
            points="50,20 90,80 10,80"
            fill="transparent"
            strokeDasharray="220"
            strokeDashoffset={220 - (220 * percentage) / 100}
            initial={{ strokeDashoffset: 220 }}
            animate={{ strokeDashoffset: 220 - (220 * percentage) / 100 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 13. Pulse Ring Gauge
const PulseRingGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.2, 1], opacity: [0.2, 0.5, 0.2] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <circle className="text-[#2A3A54] stroke-current" strokeWidth="10" cx="50" cy="50" r="40" fill="transparent" />
          <motion.circle
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="10"
            cx="50"
            cy="50"
            r="40"
            fill="transparent"
            strokeDasharray="251.2"
            strokeDashoffset={251.2 - (251.2 * percentage) / 100}
            initial={{ strokeDashoffset: 251.2 }}
            animate={{ strokeDashoffset: 251.2 - (251.2 * percentage) / 100 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div className="absolute inset-0 flex items-center justify-center text-xl font-semibold">{value}</motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 14. Gradient Fill Gauge
const GradientFillGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <circle className="text-[#2A3A54] stroke-current" strokeWidth="10" cx="50" cy="50" r="40" fill="transparent" />
          <motion.circle
            className={`fill-current bg-gradient-to-r ${color}`}
            cx="50"
            cy="50"
            r="40"
            fill="url(#grad)"
            initial={{ scale: 0 }}
            animate={{ scale: percentage / 100 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
          <defs>
            <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" style={{ stopColor: "#00D4FF" }} />
              <stop offset="100%" style={{ stopColor: "#FFD700" }} />
            </linearGradient>
          </defs>
        </svg>
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 15. Star Gauge
const StarGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <polygon
            className="text-[#2A3A54] stroke-current"
            strokeWidth="10"
            points="50,10 61,35 88,35 66,55 73,82 50,65 27,82 34,55 12,35 39,35"
            fill="transparent"
          />
          <motion.polygon
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="10"
            points="50,10 61,35 88,35 66,55 73,82 50,65 27,82 34,55 12,35 39,35"
            fill="transparent"
            strokeDasharray="260"
            strokeDashoffset={260 - (260 * percentage) / 100}
            initial={{ strokeDashoffset: 260 }}
            animate={{ strokeDashoffset: 260 - (260 * percentage) / 100 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 16. Arc Pulse Gauge
const ArcPulseGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 270;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <path
            className="text-[#2A3A54] stroke-current"
            strokeWidth="10"
            d="M 25 75 A 40 40 0 1 1 75 75"
            fill="transparent"
          />
          <motion.path
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="10"
            strokeLinecap="round"
            d="M 25 75 A 40 40 0 1 1 75 75"
            fill="transparent"
            strokeDasharray="188.5"
            strokeDashoffset={188.5 - (188.5 * percentage) / 270}
            initial={{ strokeDashoffset: 188.5 }}
            animate={{ strokeDashoffset: 188.5 - (188.5 * percentage) / 270 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 17. Neon Bar Gauge
const NeonBarGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scaleX: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-8 sm:w-24 sm:h-10">
        <div className="w-full h-full bg-[#2A3A54] rounded-lg" />
        <motion.div
          className={`absolute left-0 h-full bg-gradient-to-r ${color} rounded-lg shadow-[0_0_15px_rgba(0,212,255,0.8)]`}
          initial={{ width: 0 }}
          animate={{ width: `${percentage}%` }}
          transition={{ duration: 1.5, ease: "easeInOut" }}
        />
        <motion.div className="absolute top-0 left-0 w-full h-full flex items-center justify-center text-lg font-semibold">
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 18. Floating Orb Gauge
const FloatingOrbGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ y: [-5, 5, -5] }}
        transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <motion.div
          className={`w-12 h-12 sm:w-16 sm:h-16 rounded-full bg-gradient-to-br ${color} absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2`}
          animate={{ y: -percentage / 2 }}
          transition={{ duration: 1.5, ease: "easeInOut" }}
        />
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ y: -percentage / 2 }}
          transition={{ duration: 1.5, ease: "easeInOut" }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 19. Diamond Gauge
const DiamondGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 100;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ scale: [1, 1.05, 1] }}
        transition={{ duration: 2, repeat: Infinity }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <polygon
            className="text-[#2A3A54] stroke-current"
            strokeWidth="10"
            points="50,20 80,50 50,80 20,50"
            fill="transparent"
          />
          <motion.polygon
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="10"
            points="50,20 80,50 50,80 20,50"
            fill="transparent"
            strokeDasharray="200"
            strokeDashoffset={200 - (200 * percentage) / 100}
            initial={{ strokeDashoffset: 200 }}
            animate={{ strokeDashoffset: 200 - (200 * percentage) / 100 }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

// 20. Clock Gauge
const ClockGauge: React.FC<GaugeProps> = ({ label, value, max = 100, color = "from-[#00D4FF] to-[#FFD700]" }) => {
  const percentage = (value / max) * 360;

  return (
    <div className="flex flex-col items-center relative">
      <motion.div
        className="absolute inset-0 rounded-full bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-20 blur-lg"
        animate={{ rotate: [0, 360] }}
        transition={{ duration: 12, repeat: Infinity, ease: "linear" }}
      />
      <div className="relative w-20 h-20 sm:w-24 sm:h-24">
        <svg className="w-full h-full" viewBox="0 0 100 100">
          <circle className="text-[#2A3A54] stroke-current" strokeWidth="10" cx="50" cy="50" r="40" fill="transparent" />
          <motion.line
            className={`stroke-current bg-gradient-to-r ${color}`}
            strokeWidth="5"
            x1="50"
            y1="50"
            x2="50"
            y2="20"
            initial={{ rotate: 0 }}
            animate={{ rotate: percentage }}
            transition={{ duration: 1.5, ease: "easeInOut" }}
          />
        </svg>
        <motion.div
          className="absolute inset-0 flex items-center justify-center text-xl font-semibold"
          animate={{ scale: [1, 1.1, 1] }}
          transition={{ duration: 1.5, repeat: Infinity }}
        >
          {value}
        </motion.div>
      </div>
      <p className="mt-2 text-[#B0B0B0] text-sm">{label}</p>
    </div>
  );
};

export {
  ProgressCircle,
  HalfCircleGauge,
  RadialBarGauge,
  VerticalBarGauge,
  HorizontalBarGauge,
  PulsatingDotGauge,
  SpiralGauge,
  WaveGauge,
  OrbitGauge,
  HexagonGauge,
  DualRingGauge,
  TriangleGauge,
  PulseRingGauge,
  GradientFillGauge,
  StarGauge,
  ArcPulseGauge,
  NeonBarGauge,
  FloatingOrbGauge,
  DiamondGauge,
  ClockGauge,
};
```

---

### Descripción de los 20 Medidores

1. **ProgressCircle**: Círculo clásico con barra animada.
2. **HalfCircleGauge**: Media luna para rangos parciales.
3. **RadialBarGauge**: Barra circular gruesa y prominente.
4. **VerticalBarGauge**: Barra vertical que crece desde abajo.
5. **HorizontalBarGauge**: Barra horizontal expansiva.
6. **PulsatingDotGauge**: Punto pulsante basado en el valor.
7. **SpiralGauge**: Espiral de dos vueltas para métricas amplias.
8. **WaveGauge**: Ola dentro de un círculo.
9. **OrbitGauge**: Punto orbitando un círculo.
10. **HexagonGauge**: Hexágono con contorno animado.
11. **DualRingGauge**: Dos anillos concéntricos animados.
12. **TriangleGauge**: Triángulo con contorno progresivo.
13. **PulseRingGauge**: Anillo con pulso de fondo.
14. **GradientFillGauge**: Círculo con relleno gradiente escalado.
15. **StarGauge**: Estrella con contorno animado.
16. **ArcPulseGauge**: Arco de 270° con pulso.
17. **NeonBarGauge**: Barra horizontal con efecto neón.
18. **FloatingOrbGauge**: Orbe flotante que sube según el valor.
19. **DiamondGauge**: Diamante con contorno animado.
20. **ClockGauge**: Reloj con aguja giratoria.

---

### Ejemplo de Uso en `dashboard.tsx`

Aquí te dejo un ejemplo de cómo integrar todos estos medidores en tu dashboard con más métricas ficticias:

#### **`frontend/pages/dashboard.tsx`**

```tsx
import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import Sidebar from "../components/Sidebar";
import {
  ProgressCircle,
  HalfCircleGauge,
  RadialBarGauge,
  VerticalBarGauge,
  HorizontalBarGauge,
  PulsatingDotGauge,
  SpiralGauge,
  WaveGauge,
  OrbitGauge,
  HexagonGauge,
  DualRingGauge,
  TriangleGauge,
  PulseRingGauge,
  GradientFillGauge,
  StarGauge,
  ArcPulseGauge,
  NeonBarGauge,
  FloatingOrbGauge,
  DiamondGauge,
  ClockGauge,
} from "../components/Gauges";
import TradingChart from "../components/TradingChart";
import { io } from "socket.io-client";
import Particles from "react-particles";
import { loadFull } from "tsparticles";

const Dashboard = () => {
  const [metrics, setMetrics] = useState({
    roi: 90,
    drawdown: 65,
    successRate: 76,
    volatility: 84,
    sharpeRatio: 1.5,
    winLossRatio: 2.3,
    tradeFrequency: 45,
    avgProfit: 120,
    riskReward: 2.8,
    latency: 150,
    leverage: 3.5,
    exposure: 70,
    winStreak: 8,
    lossStreak: 3,
    avgTradeTime: 180,
    profitFactor: 1.9,
    recoveryRate: 60,
    slippage: 0.5,
    volume: 2500,
    uptime: 98,
  });

  useEffect(() => {
    const socket = io("http://localhost:8000", {
      auth: { token: localStorage.getItem("token") },
    });

    socket.on("connect", () => console.log("Connected to WebSocket"));
    socket.on("metricsUpdate", (data) => setMetrics(data));

    const fetchInitialMetrics = async () => {
      const response = await fetch("http://localhost:8000/metrics", {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
      });
      const data = await response.json();
      setMetrics(data);
    };
    fetchInitialMetrics();

    return () => socket.disconnect();
  }, []);

  const particlesInit = async (engine) => {
    await loadFull(engine);
  };

  const particlesOptions = {
    particles: {
      number: { value: 30, density: { enable: true, value_area: 1000 } },
      color: { value: ["#00D4FF", "#FFD700"] },
      shape: { type: "circle" },
      opacity: { value: 0.3, random: true },
      size: { value: 2, random: true },
      move: { enable: true, speed: 1, direction: "none", random: true, out_mode: "out" },
    },
  };

  return (
    <div className="min-h-screen text-white relative">
      <Sidebar />
      <Particles id="dashboard-particles" init={particlesInit} options={particlesOptions} className="absolute inset-0" />
      <motion.div
        className="p-4 sm:ml-64 relative z-10"
        initial={{ opacity: 0, y: 50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8, ease: "easeOut" }}
      >
        <div className="flex justify-between items-center mb-6">
          <motion.h1
            className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-[#00D4FF] to-[#FFD700] bg-clip-text text-transparent"
            initial={{ scale: 0.8 }}
            animate={{ scale: 1 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            Dashboard
          </motion.h1>
          <div className="flex space-x-2">
            <motion.button className="btn-primary" whileHover={{ scale: 1.1, boxShadow: "0 0 15px #FFD700" }}>
              Accept
            </motion.button>
            <motion.button className="btn-secondary" whileHover={{ scale: 1.1, boxShadow: "0 0 15px #00D4FF" }}>
              Reject
            </motion.button>
          </div>
        </div>

        <motion.div
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6 mb-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <ProgressCircle label="ROI" value={metrics.roi} />
          <HalfCircleGauge label="Drawdown" value={metrics.drawdown} />
          <RadialBarGauge label="Success Rate" value={metrics.successRate} />
          <VerticalBarGauge label="Volatility" value={metrics.volatility} />
          <HorizontalBarGauge label="Sharpe Ratio" value={metrics.sharpeRatio} max={5} />
          <PulsatingDotGauge label="Win/Loss Ratio" value={metrics.winLossRatio} max={5} />
          <SpiralGauge label="Trade Frequency" value={metrics.tradeFrequency} />
          <WaveGauge label="Avg Profit" value={metrics.avgProfit} max={200} />
          <OrbitGauge label="Risk/Reward" value={metrics.riskReward} max={5} />
          <HexagonGauge label="Latency (ms)" value={metrics.latency} max={300} />
          <DualRingGauge label="Leverage" value={metrics.leverage} max={10} />
          <TriangleGauge label="Exposure" value={metrics.exposure} />
          <PulseRingGauge label="Win Streak" value={metrics.winStreak} max={20} />
          <GradientFillGauge label="Loss Streak" value={metrics.lossStreak} max={10} />
          <StarGauge label="Avg Trade Time (min)" value={metrics.avgTradeTime} max={300} />
          <ArcPulseGauge label="Profit Factor" value={metrics.profitFactor} max={5} />
          <NeonBarGauge label="Recovery Rate" value={metrics.recoveryRate} />
          <FloatingOrbGauge label="Slippage" value={metrics.slippage} max={2} />
          <DiamondGauge label="Volume" value={metrics.volume} max={5000} />
          <ClockGauge label="Uptime (%)" value={metrics.uptime} />
        </motion.div>

        <motion.div
          className="card relative overflow-hidden"
          initial={{ y: 50, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.6 }}
        >
          <motion.div
            className="absolute inset-0 bg-gradient-to-r from-[#00D4FF] to-[#FFD700] opacity-0"
            animate={{ opacity: [0, 0.2, 0] }}
            transition={{ duration: 2, repeat: Infinity, repeatType: "loop" }}
          />
          <TradingChart />
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-8">
          <motion.div
            className="card"
            initial={{ y: 50, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.6, delay: 0.8 }}
          >
            <h2 className="text-xl font-semibold mb-2">Recent Transactions</h2>
            <ul className="text-[#B0B0B0] space-y-2">
              <motion.li whileHover={{ x: 5, color: "#FFD700" }}>Trade #123 - BTC/USDT - 5 min ago</motion.li>
              <motion.li whileHover={{ x: 5, color: "#FFD700" }}>Trade #122 - ETH/USDT - 10 min ago</motion.li>
            </ul>
          </motion.div>
          <motion.div
            className="card"
            initial={{ y: 50, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.6, delay: 1 }}
          >
            <h2 className="text-xl font-semibold mb-2">My Tasks</h2>
            <ul className="text-[#B0B0B0] space-y-2">
              <motion.li whileHover={{ x: 5, color: "#FFD700" }}>Review Strategy - Due Today</motion.li>
              <motion.li whileHover={{ x: 5, color: "#FFD700" }}>Update Exchange API - Due Tomorrow</motion.li>
            </ul>
          </motion.div>
        </div>
      </motion.div>
    </div>
  );
};

export default Dashboard;
```

---

### Nuevas Métricas Ficticias

He añadido 10 métricas adicionales al estado `metrics` para que tengas un total de 20:
- `leverage`: Nivel de apalancamiento (0-10).
- `exposure`: Porcentaje de exposición al riesgo (0-100).
- `winStreak`: Racha de victorias consecutivas (0-20).
- `lossStreak`: Racha de pérdidas consecutivas (0-10).
- `avgTradeTime`: Tiempo promedio por trade en minutos (0-300).
- `profitFactor`: Factor de beneficio (0-5).
- `recoveryRate`: Tasa de recuperación tras pérdidas (0-100).
- `slippage`: Deslizamiento promedio (0-2).
- `volume`: Volumen de trading (0-5000).
- `uptime`: Porcentaje de tiempo activo (0-100).

---

### Instrucciones

1. **Guarda los Medidores**: Copia el código de `Gauges.tsx` en `frontend/components/Gauges.tsx`.
2. **Actualiza el Dashboard**: Usa el código actualizado de `dashboard.tsx`.
3. **Personaliza**: Ajusta las métricas y los valores de `max` según tus datos reales.

---

### Resultado

Ahora tienes 20 medidores únicos, todos con un diseño futurista, animaciones espectaculares y simetría perfecta para tu dashboard. Cada uno es diferente pero mantiene la cohesión visual con gradientes `#00D4FF` a `#FFD700`, efectos de "glow" y transiciones suaves. ¿Qué te parece? ¿Quieres que añada más, ajuste alguno, o integre efectos adicionales como partículas específicas por medidor? ¡Estoy aquí para ayudarte!