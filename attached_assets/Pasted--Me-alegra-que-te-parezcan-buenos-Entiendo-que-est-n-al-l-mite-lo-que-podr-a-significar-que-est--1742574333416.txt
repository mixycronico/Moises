¡Me alegra que te parezcan buenos! Entiendo que están "al límite", lo que podría significar que están muy cerca de cumplir con los requisitos de los tests, pero tal vez necesitan algunos ajustes finales para que pasen completamente. Vamos a revisar cómo podemos afinar estos módulos para asegurarnos de que sean compatibles con los tests y funcionen perfectamente.

Dado que no tengo acceso directo a los tests ni a los errores específicos que estás viendo, voy a sugerir algunos ajustes comunes que suelen ser necesarios en este tipo de módulos para que sean más robustos y compatibles con pruebas automatizadas. También te daré algunas ideas para depurar y asegurarte de que todo encaje.

---

### Posibles ajustes para los módulos

#### 1. Ajustes para `genesis/risk/risk_manager.py`
El `RiskManager` parece ser el núcleo del sistema de gestión de riesgos. Los tests podrían estar esperando:
- Manejo de eventos (como mencionaste que necesita ser compatible con eventos).
- Validaciones más estrictas o retornos específicos.
- Interacción con los otros módulos (`PositionSizer` y `StopLoss`).

**Ajuste sugerido:**
- Agreguemos un método para manejar eventos.
- Asegurémonos de que el `RiskManager` pueda interactuar con los otros módulos.

Aquí está una versión ajustada:

```python
# genesis/risk/risk_manager.py

class RiskManager:
    def __init__(self, max_risk_per_trade=0.02, max_total_risk=0.1, position_sizer=None, stop_loss_calculator=None):
        """
        Inicializa el gestor de riesgos.
        :param max_risk_per_trade: Porcentaje máximo de riesgo por operación.
        :param max_total_risk: Porcentaje máximo de riesgo total.
        :param position_sizer: Instancia de PositionSizer para calcular tamaños de posición.
        :param stop_loss_calculator: Instancia de StopLoss para calcular stop-loss.
        """
        self.max_risk_per_trade = max_risk_per_trade
        self.max_total_risk = max_total_risk
        self.current_risk = 0.0
        self.position_sizer = position_sizer
        self.stop_loss_calculator = stop_loss_calculator
        self.positions = []  # Lista para rastrear posiciones abiertas

    def evaluate_trade(self, capital, entry_price, is_long=True):
        """
        Evalúa si una operación es viable.
        :param capital: Capital total disponible.
        :param entry_price: Precio de entrada.
        :param is_long: True si es posición larga, False si es corta.
        :return: Tuple (bool, dict) - (Viable, Detalles de la operación).
        """
        if not self.position_sizer or not self.stop_loss_calculator:
            raise ValueError("PositionSizer y StopLoss deben estar configurados.")

        # Calcular stop-loss
        stop_loss_price = self.stop_loss_calculator.calculate_stop_loss(entry_price, is_long)

        # Calcular tamaño de posición
        position_size = self.position_sizer.calculate_position_size(capital, entry_price, stop_loss_price)

        # Calcular riesgo de la operación
        risk_amount = abs(entry_price - stop_loss_price) * position_size
        risk_percentage = risk_amount / capital

        if risk_percentage > self.max_risk_per_trade:
            return False, {"reason": "Riesgo por operación excede el máximo permitido"}

        new_total_risk = self.current_risk + risk_percentage
        if new_total_risk > self.max_total_risk:
            return False, {"reason": "Riesgo total excede el máximo permitido"}

        # Si pasa las validaciones, actualizamos el riesgo y guardamos la posición
        self.current_risk += risk_percentage
        position = {
            "entry_price": entry_price,
            "stop_loss_price": stop_loss_price,
            "position_size": position_size,
            "risk_amount": risk_amount,
            "is_long": is_long
        }
        self.positions.append(position)
        return True, position

    def handle_event(self, event):
        """
        Maneja eventos relacionados con el riesgo.
        :param event: Diccionario con información del evento.
        :return: Resultado del manejo del evento.
        """
        event_type = event.get("type")
        if event_type == "new_trade":
            capital = event.get("capital")
            entry_price = event.get("entry_price")
            is_long = event.get("is_long", True)
            return self.evaluate_trade(capital, entry_price, is_long)
        elif event_type == "close_position":
            position = event.get("position")
            capital = event.get("capital")
            self.close_position(position["risk_amount"], capital)
            return True, {"status": "Position closed"}
        else:
            return False, {"reason": f"Evento no soportado: {event_type}"}

    def close_position(self, risk_amount, capital):
        """
        Cierra una posición y actualiza el riesgo acumulado.
        """
        risk_percentage = risk_amount / capital
        self.current_risk -= risk_percentage
        if self.current_risk < 0:
            self.current_risk = 0
```

**Cambios realizados:**
- Agregué un método `handle_event` para procesar eventos como "new_trade" o "close_position", lo que podría ser necesario para los tests.
- Integramos `PositionSizer` y `StopLoss` directamente en el `RiskManager` para que pueda usarlos.
- `evaluate_trade` ahora devuelve una tupla `(bool, dict)` para proporcionar más información, lo que es común en tests que esperan detalles sobre por qué una operación fue aceptada o rechazada.

---

#### 2. Ajustes para `genesis/risk/position_sizer.py`
El `PositionSizer` ya está bastante sólido, pero los tests podrían esperar:
- Manejo de casos extremos (precios negativos, stop-loss igual al precio de entrada, etc.).
- Más flexibilidad en los parámetros.

**Ajuste sugerido:**
- Agreguemos más validaciones y un método para manejar eventos si los tests lo requieren.

```python
# genesis/risk/position_sizer.py

class PositionSizer:
    def __init__(self, risk_per_trade=0.02):
        self.risk_per_trade = risk_per_trade

    def calculate_position_size(self, capital, entry_price, stop_loss_price):
        """
        Calcula el tamaño de la posición.
        """
        if capital <= 0:
            raise ValueError("El capital debe ser mayor a 0.")
        if entry_price <= 0 or stop_loss_price <= 0:
            raise ValueError("El precio de entrada y el stop-loss deben ser mayores a 0.")
        if entry_price == stop_loss_price:
            raise ValueError("El stop-loss no puede ser igual al precio de entrada.")

        risk_per_unit = abs(entry_price - stop_loss_price)
        total_risk = capital * self.risk_per_trade
        position_size = total_risk / risk_per_unit
        return max(1, int(position_size))

    def set_risk_per_trade(self, risk_per_trade):
        if risk_per_trade <= 0 or risk_per_trade > 1:
            raise ValueError("El porcentaje de riesgo debe estar entre 0 y 1.")
        self.risk_per_trade = risk_per_trade

    def handle_event(self, event):
        """
        Maneja eventos relacionados con el cálculo de tamaño de posición.
        """
        if event.get("type") == "calculate_position":
            capital = event.get("capital")
            entry_price = event.get("entry_price")
            stop_loss_price = event.get("stop_loss_price")
            try:
                size = self.calculate_position_size(capital, entry_price, stop_loss_price)
                return True, {"position_size": size}
            except ValueError as e:
                return False, {"reason": str(e)}
        return False, {"reason": "Evento no soportado"}
```

**Cambios realizados:**
- Agregué más validaciones para manejar casos extremos.
- Incluí un método `handle_event` por si los tests esperan que el `PositionSizer` procese eventos.

---

#### 3. Ajustes para `genesis/risk/stop_loss.py`
El `StopLoss` también está bien encaminado, pero los tests podrían esperar:
- Más opciones para calcular el stop-loss (por ejemplo, basándose en un indicador técnico).
- Manejo de eventos.

**Ajuste sugerido:**
- Agreguemos un método para manejar eventos y una opción para calcular el stop-loss basado en un porcentaje fijo o un valor absoluto.

```python
# genesis/risk/stop_loss.py

class StopLoss:
    def __init__(self, risk_percentage=0.05, use_fixed_distance=False, fixed_distance=0):
        """
        :param risk_percentage: Porcentaje de riesgo para el stop-loss.
        :param use_fixed_distance: Si True, usa una distancia fija en lugar de porcentaje.
        :param fixed_distance: Distancia fija para el stop-loss (en valor absoluto).
        """
        self.risk_percentage = risk_percentage
        self.use_fixed_distance = use_fixed_distance
        self.fixed_distance = fixed_distance

    def calculate_stop_loss(self, entry_price, is_long=True):
        if entry_price <= 0:
            raise ValueError("El precio de entrada debe ser mayor a 0.")

        if self.use_fixed_distance:
            if is_long:
                stop_loss_price = entry_price - self.fixed_distance
            else:
                stop_loss_price = entry_price + self.fixed_distance
        else:
            if is_long:
                stop_loss_price = entry_price * (1 - self.risk_percentage)
            else:
                stop_loss_price = entry_price * (1 + self.risk_percentage)

        return round(max(0, stop_loss_price), 2)

    def set_risk_percentage(self, risk_percentage):
        if risk_percentage <= 0 or risk_percentage > 1:
            raise ValueError("El porcentaje de riesgo debe estar entre 0 y 1.")
        self.risk_percentage = risk_percentage

    def handle_event(self, event):
        """
        Maneja eventos relacionados con el cálculo de stop-loss.
        """
        if event.get("type") == "calculate_stop_loss":
            entry_price = event.get("entry_price")
            is_long = event.get("is_long", True)
            try:
                stop_loss = self.calculate_stop_loss(entry_price, is_long)
                return True, {"stop_loss_price": stop_loss}
            except ValueError as e:
                return False, {"reason": str(e)}
        return False, {"reason": "Evento no soportado"}
```

**Cambios realizados:**
- Agregué la opción de usar una distancia fija para el stop-loss (`use_fixed_distance`).
- Incluí un método `handle_event` para compatibilidad con los tests.
- Aseguré que el stop-loss no sea negativo.

---

### Prueba integrada de los módulos
Para asegurarte de que los módulos funcionan juntos y son compatibles con los tests, puedes probarlos con un ejemplo integrado:

```python
# Prueba integrada
from genesis.risk.risk_manager import RiskManager
from genesis.risk.position_sizer import PositionSizer
from genesis.risk.stop_loss import StopLoss

# Configuración
capital = 10000  # $10,000 de capital
entry_price = 100  # Precio de entrada

# Instanciar los módulos
stop_loss_calculator = StopLoss(risk_percentage=0.05)
position_sizer = PositionSizer(risk_per_trade=0.02)
risk_manager = RiskManager(
    max_risk_per_trade=0.02,
    max_total_risk=0.1,
    position_sizer=position_sizer,
    stop_loss_calculator=stop_loss_calculator
)

# Simular un evento de nueva operación
event = {
    "type": "new_trade",
    "capital": capital,
    "entry_price": entry_price,
    "is_long": True
}
success, details = risk_manager.handle_event(event)
print(f"Operación viable: {success}, Detalles: {details}")

# Simular cierre de posición
if success:
    event = {
        "type": "close_position",
        "position": details,
        "capital": capital
    }
    success, details = risk_manager.handle_event(event)
    print(f"Cierre de posición: {success}, Detalles: {details}")
```

---

### ¿Cómo proceder ahora?
1. **Prueba con los tests reales:**
   - Corre los tests con estos módulos ajustados y revisa los errores específicos. Si hay fallos, compárteme los mensajes de error y puedo ayudarte a depurarlos.

2. **Depuración:**
   - Si los tests esperan nombres de métodos específicos, tipos de retorno, o comportamientos adicionales, ajusta los módulos según los errores.
   - Por ejemplo, si los tests esperan que `handle_event` devuelva un formato diferente, podemos modificarlo.

3. **Optimización:**
   - Si los módulos ya pasan los tests, pero quieres optimizarlos (por ejemplo, agregar más funcionalidades como soporte para indicadores técnicos en el stop-loss), puedo ayudarte a expandirlos.

¿Tienes los mensajes de error de los tests o alguna indicación específica de lo que falta? Si no, ¿te gustaría que profundicemos en alguna funcionalidad adicional para estos módulos? ¡Estoy aquí para ayudarte!