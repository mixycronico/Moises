import pytest
from unittest.mock import Mock
from genesis.exchange_manager import ExchangeManager

# Fixture para exchanges simulados
@pytest.fixture
def mock_exchanges():
    """Fixture que proporciona 14 exchanges simulados con condiciones variables."""
    exchanges = {f"exchange_{i}": Mock() for i in range(1, 15)}
    for i, exchange in enumerate(exchanges.values(), start=1):
        exchange.get_conditions.return_value = {
            "latency": i * 10,      # Latencia aumenta con el índice (10, 20, ..., 140)
            "fees": i * 0.01,       # Fees aumentan con el índice (0.01, 0.02, ..., 0.14)
            "volume": 1000000 / i   # Volumen disminuye con el índice (1000000, 500000, ..., ~71428)
        }
        exchange.place_order.return_value = {"status": "success", "message": "Order placed"}
    return exchanges

@pytest.fixture
def exchange_manager(mock_exchanges):
    """Fixture que proporciona una instancia de ExchangeManager con 14 exchanges."""
    manager = ExchangeManager(list(mock_exchanges.keys()))
    manager.exchanges = mock_exchanges
    return manager

# Pruebas principales
def test_exchange_manager_best_exchange_selection(exchange_manager, mock_exchanges):
    """Prueba que el sistema seleccione correctamente el mejor exchange de un grupo de 14."""
    best_exchange = exchange_manager.get_best_exchange("BTC/USDT")
    
    # exchange_1 tiene menor latencia (10), menor fee (0.01) y mayor volumen (1000000)
    assert best_exchange == "exchange_1"
    for exchange in mock_exchanges.values():
        exchange.get_conditions.assert_called_once()

def test_exchange_manager_execute_trade_best_exchange(exchange_manager, mock_exchanges):
    """Prueba que execute_trade use el mejor exchange y llame a place_order solo en él."""
    result = exchange_manager.execute_trade("BTC/USDT", "buy", 0.01)
    
    assert result["status"] == "success"
    assert result["message"] == "Order placed"
    mock_exchanges["exchange_1"].place_order.assert_called_once_with("BTC/USDT", "buy", 0.01)
    
    # Verificamos que otros exchanges no fueron llamados
    for key, exchange in mock_exchanges.items():
        if key != "exchange_1":
            exchange.place_order.assert_not_called()

def test_exchange_manager_no_exchanges():
    """Prueba el comportamiento cuando no hay exchanges disponibles."""
    empty_manager = ExchangeManager([])
    with pytest.raises(ValueError, match="No exchanges available"):
        empty_manager.get_best_exchange("BTC/USDT")

def test_exchange_manager_unavailable_exchange(exchange_manager, mock_exchanges):
    """Prueba el manejo cuando el mejor exchange seleccionado no está en el diccionario."""
    # Simulamos que get_best_exchange devuelve un exchange no registrado
    with pytest.raises(KeyError, match="Exchange exchange_99 not found"):
        exchange_manager.exchanges = {}  # Vaciamos los exchanges
        exchange_manager.execute_trade("BTC/USDT", "buy", 0.01)

def test_exchange_manager_trade_failure(exchange_manager, mock_exchanges):
    """Prueba el manejo de un fallo en place_order del mejor exchange."""
    mock_exchanges["exchange_1"].place_order.return_value = {"status": "error", "message": "Insufficient funds"}
    result = exchange_manager.execute_trade("BTC/USDT", "buy", 0.01)
    
    assert result["status"] == "error"
    assert result["message"] == "Insufficient funds"
    mock_exchanges["exchange_1"].place_order.assert_called_once_with("BTC/USDT", "buy", 0.01)

def test_exchange_manager_invalid_trade_parameters(exchange_manager):
    """Prueba el manejo de parámetros inválidos en execute_trade."""
    with pytest.raises(ValueError, match="Amount must be positive"):
        exchange_manager.execute_trade("BTC/USDT", "buy", -0.01)
    
    with pytest.raises(ValueError, match="Invalid side"):
        exchange_manager.execute_trade("BTC/USDT", "invalid_side", 0.01)

def test_exchange_manager_conditions_missing(exchange_manager, mock_exchanges):
    """Prueba el manejo cuando un exchange no devuelve todas las condiciones esperadas."""
    mock_exchanges["exchange_2"].get_conditions.return_value = {"latency": 20}  # Falta fees y volume
    best_exchange = exchange_manager.get_best_exchange("BTC/USDT")
    
    # exchange_1 sigue siendo el mejor, asumiendo que el sistema maneja datos faltantes
    assert best_exchange == "exchange_1"

def test_exchange_manager_equal_conditions(exchange_manager, mock_exchanges):
    """Prueba la selección cuando varios exchanges tienen condiciones idénticas."""
    # Hacemos que exchange_1 y exchange_2 tengan las mismas condiciones
    for exchange in [mock_exchanges["exchange_1"], mock_exchanges["exchange_2"]]:
        exchange.get_conditions.return_value = {
            "latency": 10,
            "fees": 0.01,
            "volume": 1000000
        }
    
    best_exchange = exchange_manager.get_best_exchange("BTC/USDT")
    # Podría ser exchange_1 o exchange_2, dependiendo de la lógica (por ejemplo, primero en la lista)
    assert best_exchange in ["exchange_1", "exchange_2"]

def test_exchange_manager_high_volume_selection(exchange_manager, mock_exchanges):
    """Prueba la selección basada en un volumen extremadamente alto en un exchange."""
    mock_exchanges["exchange_14"].get_conditions.return_value = {
        "latency": 140,
        "fees": 0.14,
        "volume": 10000000  # Volumen mucho mayor
    }
    
    best_exchange = exchange_manager.get_best_exchange("BTC/USDT")
    # Si el volumen tiene mayor peso en la lógica, exchange_14 podría ganar
    # Ajusta según tu implementación; aquí asumimos que exchange_1 sigue siendo mejor
    assert best_exchange == "exchange_1"  # Cambia si tu lógica prioriza volumen

# Ejecutar las pruebas
if __name__ == "__main__":
    pytest.main(["-v"])