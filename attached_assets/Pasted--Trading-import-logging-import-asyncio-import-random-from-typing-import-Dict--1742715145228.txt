


















Trading





import logging
import asyncio
import random
from typing import Dict, Any, Optional
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor

# Configuración de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# Simulación de dependencias mínimas
class ExchangeClient:
    def __init__(self, config):
        self.api_key = config["api_key"]
        self.fail_rate = random.random()  # Probabilidad de fallo para simulación

    def get_current_price(self, pair):
        return random.uniform(40000, 60000) if random.random() > self.fail_rate else None

    def place_order(self, pair, side, size):
        if random.random() < self.fail_rate:
            raise Exception("Simulated API failure")
        return {"order_id": "123", "executed_price": self.get_current_price(pair), "size": size}

class ExchangeManager:
    def __init__(self, config):
        self.exchanges = {name: ExchangeClient(conf) for name, conf in config.items()}
        self.failures = {name: 0 for name in config}
        self.max_failures = 5

    def get_best_exchange(self, pair):
        available = [name for name, count in self.failures.items() if count < self.max_failures]
        return random.choice(available) if available else None

    def report_failure(self, name):
        self.failures[name] += 1

class RiskManager:
    def __init__(self, config):
        self.max_risk = config["max_risk_per_trade"]
        self.stop_loss_pct = config["stop_loss_percent"]

    def calculate_position_size(self, capital, price):
        return (capital * self.max_risk) / price if price > 0 else 0

    def apply_stop_loss(self, price, side):
        return price * (1 - self.stop_loss_pct) if side == "buy" else price * (1 + self.stop_loss_pct)

class SlippageController:
    def __init__(self, max_slippage):
        self.max_slippage = max_slippage

    def validate_slippage(self, entry_price, execution_price):
        return abs(execution_price - entry_price) / entry_price <= self.max_slippage if entry_price > 0 else False

class FailoverHandler:
    def __init__(self, retry_attempts):
        self.retries = retry_attempts

    def execute_with_failover(self, func, *args):
        for attempt in range(self.retries + 1):
            try:
                result = func(*args)
                return True, result
            except Exception as e:
                logging.warning(f"Fallo en intento {attempt + 1}/{self.retries + 1}: {e}")
                if attempt == self.retries:
                    return False, str(e)
                asyncio.sleep(1)  # Simula espera entre reintentos

class Strategy:
    def __init__(self, config):
        self.config = config

    def generate_signal(self, market_data):
        return random.choice(["buy", "sell"])  # Simulación simple

class StrategyFactory:
    def create_strategy(self, name, config):
        return Strategy(config)

class MarketData:
    def __init__(self, config):
        self.source = config["source"]

    def get_data(self, pair):
        # Simulación de datos extremos
        prices = [50000 * (1 + random.uniform(-0.5, 1.0)) for _ in range(10)]  # Volatilidad extrema
        return {"prices": prices}

# Motor de Trading Mejorado
class TradingEngine:
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.exchange_manager = ExchangeManager(config["exchanges"])
        self.risk_manager = RiskManager(config["risk_management"])
        self.slippage_controller = SlippageController(config["risk_management"]["max_slippage"])
        self.failover_handler = FailoverHandler(config["failover"]["retry_attempts"])
        self.strategy_factory = StrategyFactory()
        self.market_data = MarketData(config["market_data"])
        self.executor = ThreadPoolExecutor(max_workers=10)  # Para operaciones concurrentes
        self.volatility_threshold = 0.1  # Umbral para pausar en volatilidad extrema

    async def execute_trade(self, strategy_name: str, trading_pair: str, side: str, capital: float) -> Dict[str, Any]:
        # Validación de entrada
        if capital <= 0 or not trading_pair or side not in ["buy", "sell"]:
            return {"status": "error", "message": "Parámetros inválidos"}

        # Obtener datos de mercado
        try:
            market_data = await asyncio.to_thread(self.market_data.get_data, trading_pair)
            if not market_data or "prices" not in market_data or not market_data["prices"]:
                return {"status": "error", "message": "Datos de mercado inválidos"}
        except Exception as e:
            logging.error(f"Error obteniendo datos de mercado: {e}")
            return {"status": "error", "message": "Fallo en datos de mercado"}

        # Chequeo de volatilidad extrema
        price_volatility = 
max(market_data["prices"]) / min(market_data["prices"]) - 1
        if price_volatility > self.volatility_threshold:
            logging.critical(f"Volatilidad extrema detectada ({price_volatility:.2%}). Pausando.")
            return {"status": "paused", "reason": "Volatilidad extrema"}

        # Seleccionar estrategia y generar señal
        strategy = self.strategy_factory.create_strategy(strategy_name, self.config["strategies"][strategy_name])
        signal = strategy.generate_signal(market_data)
        if signal != side:
            logging.warning(f"Estrategia {strategy_name} sugiere {signal}, pero se intentó {side}.")
            return {"status": "canceled", "reason": "Señal no coincide"}

        # Obtener el mejor exchange
        best_exchange = self.exchange_manager.get_best_exchange(trading_pair)
        if not best_exchange:
            logging.error("No se encontró un exchange adecuado.")
            return {"status": "error", "message": "No suitable exchange found"}

        # Calcular tamaño de la orden
        entry_price = market_data["prices"][-1]
        position_size = self.risk_manager.calculate_position_size(capital, entry_price)
        stop_loss = self.risk_manager.apply_stop_loss(entry_price, side)

        # Validar slippage
        execution_price = self.exchange_manager.exchanges[best_exchange].get_current_price(trading_pair)
        if execution_price is None or not self.slippage_controller.validate_slippage(entry_price, execution_price):
            logging.warning(f"Slippage muy alto o precio inválido en {best_exchange}.")
            return {"status": "error", "message": "Slippage demasiado alto"}

        # Ejecutar la orden con failover
        success, result = self.failover_handler.execute_with_failover(
            self.exchange_manager.exchanges[best_exchange].place_order,
            trading_pair, side, position_size
        )

        if success:
            logging.info(f"Orden ejecutada con éxito en {best_exchange}: {result}")
            return {"status": "success", "exchange": best_exchange, "order_details": result}
        else:
            self.exchange_manager.report_failure(best_exchange)
            logging.error("Fallo en la ejecución tras reintentos.")
            return {"status": "error", "message": "Orden no ejecutada"}

    async def stress_test(self, num_trades: int):
        tasks = [
            self.execute_trade("sma_crossover", "BTC/USDT", random.choice(["buy", "sell"]), 1000)
            for _ in range(num_trades)
        ]
        results = await asyncio.gather(*tasks)
        return results

# Configuración y Prueba
if __name__ == "__main__":
    config = {
        "exchanges": {
            "binance": {"api_key": "XXXX", "api_secret": "YYYY"},
            "bybit": {"api_key": "AAAA", "api_secret": "BBBB"},
        },
        "risk_management": {
            "max_risk_per_trade": 0.02,
            "stop_loss_percent": 0.01,
            "trailing_stop": True,
            "trailing_stop_percent": 0.005,
            "max_slippage": 0.001
        },
        "failover": {"retry_attempts": 3},
        "market_data": {"source": "binance"},
        "strategies": {
            "sma_crossover": {"short_window": 5, "long_window": 20},
            "rsi": {"rsi_period": 14},
            "macd": {"fast_period": 12, "slow_period": 26, "signal_period": 9},
        }
    }

    trading_engine = TradingEngine(config)

    # Prueba simple
    result = asyncio.run(trading_engine.execute_trade("sma_crossover", "BTC/USDT", "buy", 1000))
    print("Prueba simple:", result)

    # Prueba de estrés: 100 operaciones simultáneas
    print("\nIniciando prueba de estrés...")
    stress_results = asyncio.run(trading_engine.stress_test(100))
    successes = sum(1 for r in stress_results if r["status"] == "success")
    print(f"Prueba de estrés completada: {successes}/100 operaciones exitosas")