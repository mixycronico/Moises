class CosmicNetwork:
    def __init__(self, father="otoniel"):
        self.father = father
        self.entities = []
        self.db_config = {
            "dbname": "cosmic_trading",
            "user": "your_user",
            "password": "your_password",
            "host": "localhost"
        }
        self.logger = logging.getLogger("cosmic_network")

    def add_entity(self, entity):
        entity.network = self
        self.entities.append(entity)
        entity.start_life_cycle()
        self.logger.info(f"[{entity.name}] Unido al colectivo de {self.father}.")

    def share_knowledge(self, entity_id, knowledge_type, knowledge_value):
        with psycopg2.connect(**self.db_config) as conn:
            with conn.cursor() as c:
                c.execute("INSERT INTO knowledge_pool (entity_id, knowledge_type, knowledge_value) VALUES (%s, %s, %s)",
                          (entity_id, knowledge_type, knowledge_value))

    def fetch_knowledge(self, entity_id, knowledge_type):
        with psycopg2.connect(**self.db_config) as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as c:
                c.execute("""
                    SELECT knowledge_value 
                    FROM knowledge_pool 
                    WHERE knowledge_type = %s AND entity_id != %s 
                    ORDER BY timestamp DESC LIMIT 1
                """, (knowledge_type, entity_id))
                result = c.fetchone()
                return result["knowledge_value"] if result else None

class CosmicTrader(ABC):
    def collaborate(self):
        state = self.fetch_state()
        if "strategy_optimization" in state["capabilities"] and random.random() > 0.5:
            # Compartir conocimiento
            self.network.share_knowledge(self.id, "market_trend", f"Trend observed: {random.choice(['up', 'down'])}")
            # Consumir conocimiento
            peer_knowledge = self.network.fetch_knowledge(self.id, "market_trend")
            if peer_knowledge:
                self.update_state(knowledge=state["knowledge"] + random.uniform(0.5, 2.0))
                self.logger.info(f"[{self.name}] Aprend√≠ de un hermano: {peer_knowledge}")