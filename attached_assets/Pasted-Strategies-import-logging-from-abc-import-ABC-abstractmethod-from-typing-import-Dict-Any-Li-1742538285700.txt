Strategies






import logging
from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
import numpy as np
import pandas as pd
import joblib
from functools import lru_cache

# Configuración básica de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ===== CLASE BASE MEJORADA =====

class Strategy(ABC):
    """Clase base para todas las estrategias de trading."""

    def __init__(self, name: str, config: Dict[str, Any]):
        self.name = name
        self.config = self._validate_config(config)
        self.logger = logging.getLogger(self.name)

    def _validate_config(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """Valida que la configuración contenga los parámetros necesarios."""
        required = getattr(self, "required_config", [])
        for param in required:
            if param not in config:
                raise ValueError(f"Falta el parámetro requerido '{param}' en la configuración de {self.name}")
        return config

    @abstractmethod
    def generate_signal(self, market_data: Dict[str, Any]) -> str:
        """Genera una señal de trading: 'buy', 'sell' o 'hold'."""
        pass

# ===== ESTRATEGIAS OPTIMIZADAS =====

class SMACrossoverStrategy(Strategy):
    """Estrategia de cruce de medias móviles simples (SMA)."""
    required_config = ["short_window", "long_window"]

    def generate_signal(self, market_data: Dict[str, Any]) -> str:
        prices = pd.Series(market_data["prices"])
        if len(prices) < self.config["long_window"]:
            return "hold"

        short_sma = prices[-self.config["short_window"]:].mean()
        long_sma = prices[-self.config["long_window"]:].mean()

        return "buy" if short_sma > long_sma else "sell" if short_sma < long_sma else "hold"

class RSIStrategy(Strategy):
    """Estrategia basada en el Índice de Fuerza Relativa (RSI)."""
    required_config = ["rsi_period"]

    def generate_signal(self, market_data: Dict[str, Any]) -> str:
        prices = pd.Series(market_data["prices"])
        if len(prices) < self.config["rsi_period"] + 1:
            return "hold"

        delta = prices.diff()
        gain = delta.where(delta > 0, 0).rolling(window=self.config["rsi_period"]).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=self.config["rsi_period"]).mean() + 0.0001
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))

        return "sell" if rsi.iloc[-1] > 70 else "buy" if rsi.iloc[-1] < 30 else "hold"

class MACDStrategy(Strategy):
    """Estrategia basada en MACD."""
    required_config = ["fast_period", "slow_period", "signal_period"]

    def generate_signal(self, market_data: Dict[str, Any]) -> str:
        prices = pd.Series(market_data["prices"])
        if len(prices) < self.config["slow_period"] + self.config["signal_period"]:
            return "hold"

        ema_fast = prices.ewm(span=self.config["fast_period"], adjust=False).mean()
        ema_slow = prices.ewm(span=self.config["slow_period"], adjust=False).mean()
        macd = ema_fast - ema_slow
        signal_line = macd.ewm(span=self.config["signal_period"], adjust=False).mean()

        return "buy" if macd.iloc[-1] > signal_line.iloc[-1] else "sell" if macd.iloc[-1] < signal_line.iloc[-1] else "hold"

# ===== ESTRATEGIA CON IA REAL =====

class IABasedStrategy(Strategy):
    """Estrategia basada en un modelo de IA real."""
    required_config = ["model_path"]

    def __init__(self, name: str, config: Dict[str, Any]):
        super().__init__(name, config)
        self.model = joblib.load(config["model_path"])

    def generate_signal(self, market_data: Dict[str, Any]) -> str:
        features = self._preprocess_features(market_data.get("features", []))
        prediction = self.model.predict([features])[0]
        return "buy" if prediction > 0.6 else "sell" if prediction < 0.4 else "hold"

    def _preprocess_features(self, features: List[float]) -> List[float]:
        return np.array(features[-10:]) if len(features) >= 10 else np.pad(features, (10 - len(features), 0), "constant")

# ===== FACTORY OPTIMIZADA =====

class StrategyFactory:
    """Fábrica dinámica para crear estrategias."""

    _strategies: Dict[str, type] = {}

    @classmethod
    def register_strategy(cls, name: str, strategy_class: type):
        """Registra una nueva estrategia dinámicamente."""
        cls._strategies[name] = strategy_class

    def create_strategy(self, name: str, config: Dict[str, Any]) -> Strategy:
        """Crea una instancia de la estrategia especificada."""
        strategy_class = self._strategies.get(name)
        if not strategy_class:
            raise ValueError(f"Estrategia desconocida: {name}")
        return strategy_class(name, config)

# Registro de estrategias
StrategyFactory.register_strategy("sma_crossover", SMACrossoverStrategy)
StrategyFactory.register_strategy("rsi", RSIStrategy)
StrategyFactory.register_strategy("macd", MACDStrategy)
StrategyFactory.register_strategy("ia_based", IABasedStrategy)

# ===== EJEMPLO DE USO =====

if __name__ == "__main__":
    # Configuración de ejemplo
    config = {
        "sma_crossover": {"short_window": 5, "long_window": 20},
        "rsi": {"rsi_period": 14},
        "macd": {"fast_period": 12, "slow_period": 26, "signal_period": 9},
        "ia_based": {"model_path": "model.pkl"}
    }

    # Datos de mercado simulados
    market_data = {
        "prices": list(np.random.random(50)),
        "features": list(np.random.random(15))
    }

    factory = StrategyFactory()
    sma_strategy = factory.create_strategy("sma_crossover", config["sma_crossover"])
    print(f"Señal SMA: {sma_strategy.generate_signal(market_data)}")






Risk management




import logging
from typing import Dict, Any, Tuple
import numpy as np
import pandas as pd
import asyncio
import time

# Configuración de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ===== GESTOR DE RIESGO PRINCIPAL =====
class RiskManager:
    """Manejo de riesgo avanzado para operaciones de trading."""

    def __init__(self, config: Dict[str, Any]):
        self.max_risk_per_trade = config.get("max_risk_per_trade", 0.02)
        self.stop_loss_atr_multiplier = config.get("stop_loss_atr_multiplier", 2.0)
        self.trailing_stop_atr_multiplier = config.get("trailing_stop_atr_multiplier", 1.5)
        self.max_slippage = config.get("max_slippage", 0.001)
        self.logger = logging.getLogger("RiskManager")

    def calculate_position_size(self, capital: float, entry_price: float, atr: float) -> float:
        """Calcula el tamaño de la posición basado en el capital y el ATR."""
        risk_amount = capital * self.max_risk_per_trade
        stop_loss_distance = atr * self.stop_loss_atr_multiplier
        position_size = risk_amount / (stop_loss_distance * entry_price)
        self.logger.info(f"Posición calculada: {position_size} (capital: {capital}, ATR: {atr})")
        return round(position_size, 6)

    def apply_stop_loss(self, entry_price: float, side: str, atr: float) -> float:
        """Calcula el stop-loss dinámico basado en ATR."""
        stop_loss_distance = atr * self.stop_loss_atr_multiplier
        stop_loss = entry_price - stop_loss_distance if side == "buy" else entry_price + stop_loss_distance
        return round(stop_loss, 6)

    def apply_trailing_stop(self, current_price: float, highest_price: float, side: str, atr: float) -> float:
        """Calcula el trailing stop adaptativo basado en ATR."""
        trailing_stop_distance = atr * self.trailing_stop_atr_multiplier
        if side == "buy":
            trailing_stop = max(highest_price - trailing_stop_distance, self.apply_stop_loss(current_price, side, atr))
        else:
            trailing_stop = min(highest_price + trailing_stop_distance, self.apply_stop_loss(current_price, side, atr))
        return round(trailing_stop, 6)

# ===== CONTROLADOR DE SLIPPAGE =====
class SlippageController:
    """Maneja la validación del slippage en cada orden."""

    def __init__(self, base_max_slippage: float, liquidity_factor: float):
        self.base_max_slippage = base_max_slippage
        self.liquidity_factor = liquidity_factor
        self.logger = logging.getLogger("SlippageController")

    def validate_slippage(self, expected_price: float, execution_price: float, liquidity: float) -> bool:
        """Valida el slippage dinámicamente según liquidez."""
        dynamic_max_slippage = self.base_max_slippage * (1 + (self.liquidity_factor / liquidity))
        slippage = abs(execution_price - expected_price) / expected_price
        if slippage > dynamic_max_slippage:
            self.logger.warning(f"Slippage excesivo: {slippage:.6f} (límite: {dynamic_max_slippage:.6f})")
            return False
        return True

# ===== MANEJO DE LIQUIDEZ =====
class LiquidityChecker:
    """Evalúa la liquidez considerando la profundidad del order book."""

    def __init__(self, min_liquidity: float, depth_levels: int):
        self.min_liquidity = min_liquidity
        self.depth_levels = depth_levels
        self.logger = logging.getLogger("LiquidityChecker")

    def check_liquidity(self, order_book: Dict[str, Any]) -> bool:
        """Verifica la liquidez en múltiples niveles del order book."""
        bids = order_book.get("bids", [])[:self.depth_levels]
        asks = order_book.get("asks", [])[:self.depth_levels]
        bid_volume = sum([bid[1] for bid in bids])  # [precio, volumen]
        ask_volume = sum([ask[1] for ask in asks])
        liquidity = min(bid_volume, ask_volume)
        if liquidity >= self.min_liquidity:
            return True
        self.logger.warning(f"Liquidez insuficiente: {liquidity} < {self.min_liquidity}")
        return False

# ===== MANEJO DE FALLAS Y RECUPERACIÓN =====
class FailoverHandler:
    """Maneja fallas y reintentos en múltiples exchanges."""

    def __init__(self, retry_attempts: int = 3, backoff_factor: float = 2.0):
        self.retry_attempts = retry_attempts
        self.backoff_factor = backoff_factor
        self.logger = logging.getLogger("FailoverHandler")

    async def execute_with_failover(self, execute_trade, *args) -> Tuple[bool, Any]:
        """Ejecuta la orden con reintentos y backoff exponencial."""
        for attempt in range(self.retry_attempts):
            try:
                result = await execute_trade(*args)
                return True, result
            except Exception as e:
                wait_time = self.backoff_factor ** attempt
                self.logger.warning(f"Error (intento {attempt + 1}/{self.retry_attempts}): {e}. Esperando {wait_time}s")
                await asyncio.sleep(wait_time)
        return False, "Falló tras múltiples intentos"

# ===== EJEMPLO DE USO ASÍNCRONO =====
async def simulate_trade(price: float) -> float:
    """Simula la ejecución de una orden."""
    await asyncio.sleep(0.1)  # Simula latencia
    if np.random.random() < 0.2:  # 20% de probabilidad de fallo
        raise Exception("Fallo simulado en el exchange")
    return price * 1.001  # Simula ejecución con pequeño slippage

async def main():
    config = {
        "max_risk_per_trade": 0.02,
        "stop_loss_atr_multiplier": 2.0,
        "trailing_stop_atr_multiplier": 1.5,
        "max_slippage": 0.001
    }

    risk_manager = RiskManager(config)
    slippage_controller = SlippageController(base_max_slippage=0.001, liquidity_factor=1.0)
    liquidity_checker = LiquidityChecker(min_liquidity=1000, depth_levels=5)
    failover_handler = FailoverHandler(retry_attempts=3, backoff_factor=2.0)

    # Ejemplo de uso
    capital = 10000
    entry_price = 50000
    atr = 100  # ATR simulado
    trade_size = risk_manager.calculate_position_size(capital, entry_price, atr)
    stop_loss = risk_manager.apply_stop_loss(entry_price, "buy", atr)
    trailing_stop = risk_manager.apply_trailing_stop(50500, 51000, "buy", atr)

    print(f"Tamaño de la posición: {trade_size}")
    print(f"Stop-Loss: {stop_loss}")
    print(f"Trailing Stop: {trailing_stop}")

    # Validación de slippage
    execution_price = 50010
    liquidity = 1500
    slippage_valid = slippage_controller.validate_slippage(entry_price, execution_price, liquidity)
    print(f"Slippage válido: {slippage_valid}")

    # Verificación de liquidez
    order_book = {
        "bids": [[49990, 500], [49980, 400], [49970, 600]],
        "asks": [[50010, 450], [50020, 550], [50030, 700]]
    }
    liquidity_ok = liquidity_checker.check_liquidity(order_book)
    print(f"Liquidez suficiente: {liquidity_ok}")

    # Ejecución con failover
    success, result = await failover_handler.execute_with_failover(simulate_trade, entry_price)
    print(f"Ejecución exitosa: {success}, Resultado: {result}")

if __name__ == "__main__":
    asyncio.run(main())





Market data




import asyncio
import logging
import random
import numpy as np
import pandas as pd
from typing import Dict, List

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

class MarketData:
    """Gestor de datos de mercado con manejo de concurrencia y cálculo de ATR."""

    def __init__(self, api_clients: Dict[str, object], update_interval: float = 5.0, max_concurrent: int = 50):
        self.api_clients = api_clients
        self.update_interval = update_interval
        self.semaphore = asyncio.Semaphore(max_concurrent)
        self.data = {}
        self.active_symbols = set()
        self.logger = logging.getLogger("MarketData")

    async def fetch_symbol_data(self, symbol: str, exchange_name: str, client):
        """Obtiene datos del mercado de un símbolo desde un exchange."""
        async with self.semaphore:
            try:
                data = await client.fetch_market_data(symbol)
                if not data or "price" not in data or data["price"] <= 0:
                    self.logger.error(f"Datos inválidos de {exchange_name} para {symbol}")
                    return
                self.data.setdefault(symbol, {})[exchange_name] = data
                self.logger.info(f"Actualizado {symbol} en {exchange_name}: {data['price']}")
            except Exception as e:
                self.logger.warning(f"Error en {exchange_name} para {symbol}: {e}")

    def start_update_loop(self, symbols: List[str]):
        """Inicia la actualización constante de datos de los símbolos dados."""
        self.active_symbols = set(symbols)
        asyncio.create_task(self.update_loop())

    async def update_loop(self):
        """Loop principal para actualizar datos de todos los símbolos activos."""
        while True:
            tasks = [
                self.fetch_symbol_data(symbol, ex, client)
                for symbol in self.active_symbols
                for ex, client in self.api_clients.items()
            ]
            await asyncio.gather(*tasks)
            await asyncio.sleep(self.update_interval)

    def get_price(self, symbol: str, exchange_name: str) -> float:
        return self.data.get(symbol, {}).get(exchange_name, {}).get("price", 0)

    def get_ohlcv(self, symbol: str, exchange_name: str) -> List:
        return self.data.get(symbol, {}).get(exchange_name, {}).get("ohlcv", [])

    def get_atr(self, symbol: str, exchange_name: str, period: int = 14) -> float:
        """Calcula el ATR desde el OHLCV."""
        ohlcv = self.get_ohlcv(symbol, exchange_name)
        if len(ohlcv) < period + 1:
            return 0.0
        df = pd.DataFrame(ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"])
        high = df["high"]
        low = df["low"]
        close = df["close"]
        prev_close = close.shift(1)
        tr = pd.concat([
            high - low,
            (high - prev_close).abs(),
            (low - prev_close).abs()
        ], axis=1).max(axis=1)
        atr = tr.rolling(window=period).mean().iloc[-1]
        return round(atr, 6) if not np.isnan(atr) else 0.0

class SlippageController:
    """Valida slippage dinámico basado en ATR."""
    
    def __init__(self, base_max_slippage: float, market_data: MarketData):
        self.base_max_slippage = base_max_slippage
        self.market_data = market_data
        self.logger = logging.getLogger("SlippageController")

    def get_dynamic_slippage(self, symbol: str, exchange_name: str) -> float:
        atr = self.market_data.get_atr(symbol, exchange_name)
        return min(self.base_max_slippage * (1 + atr / 100), 0.01)  # 1% máx

    def validate_slippage(self, entry_price: float, execution_price: float, symbol: str, exchange_name: str) -> bool:
        max_slippage = self.get_dynamic_slippage(symbol, exchange_name)
        real_slippage = abs(execution_price - entry_price) / entry_price
        if real_slippage > max_slippage:
            self.logger.warning(f"Slippage alto en {symbol}: {real_slippage:.6f} > {max_slippage:.6f}")
            return False
        return True

class TradingEngine:
    """Simulación de motor de trading que valida condiciones antes de operar."""

    def __init__(self, market_data: MarketData):
        self.market_data = market_data
        self.logger = logging.getLogger("TradingEngine")

    def execute_trade(self, strategy_name: str, trading_pair: str, side: str, capital: float) -> Dict:
        atr = self.market_data.get_atr(trading_pair, "binance")
        if atr > 0.05:  # Umbral de alta volatilidad
            self.logger.critical(f"ATR elevado en {trading_pair} ({atr}), pausando operación.")
            return {"status": "paused", "reason": "Volatilidad extrema"}
        # Aquí vendría la lógica de ejecución real
        self.logger.info(f"Ejecución de estrategia {strategy_name} en {trading_pair} con ${capital}")
        return {"status": "executed", "exchange": "binance", "price": self.market_data.get_price(trading_pair, "binance")}

# ===== SIMULACIÓN DE CONDICIONES EXTREMAS =====

async def simulate_extreme_conditions(engine: TradingEngine):
    symbol = "BTC/USDT"
    simulated_price = 50000 * (1 + random.uniform(-0.1, 0.1))
    simulated_ohlcv = [[t, 50000, 51000, 49000,
                        50000 * (1 + random.uniform(-0.1, 0.1)), 100]
                       for t in range(100)]
    
    engine.market_data.data[symbol] = {
        "binance": {
            "price": simulated_price,
            "ohlcv": simulated_ohlcv
        }
    }

    result = engine.execute_trade("sma_crossover", symbol, "buy", 1000)
    print(f"Resultado: {result}")

# ===== EJECUCIÓN =====

if __name__ == "__main__":
    class DummyClient:
        async def fetch_market_data(self, symbol):
            return {
                "price": 50000 * (1 + random.uniform(-0.01, 0.01)),
                "ohlcv": [[t, 50000, 51000, 49000, 50000 * (1 + random.uniform(-0.01, 0.01)), 100] for t in range(100)]
            }

    dummy_clients = {"binance": DummyClient()}
    market_data = MarketData(dummy_clients)
    slippage_controller = SlippageController(base_max_slippage=0.001, market_data=market_data)
    engine = TradingEngine(market_data)

    asyncio.run(simulate_extreme_conditions(engine))

