import pytest
from fastapi import FastAPI, HTTPException
from fastapi.testclient import TestClient

# Configuración del FastAPI app
app = FastAPI()

@app.get("/status")
async def get_status():
    """Devuelve el estado del sistema y una lista de exchanges."""
    return {"status": "ok", "exchanges": ["exchange_1", "exchange_2"]}

@app.get("/exchange/{exchange_name}")
async def get_exchange(exchange_name: str):
    """Devuelve información de un exchange específico o un error si no existe."""
    valid_exchanges = ["exchange_1", "exchange_2"]
    if exchange_name not in valid_exchanges:
        raise HTTPException(status_code=404, detail="Exchange not found")
    return {"exchange": exchange_name}

# Fixture para el TestClient
@pytest.fixture
def client():
    """Fixture que proporciona un TestClient para el FastAPI app."""
    return TestClient(app)

# Pruebas para /status
def test_status_endpoint_success(client):
    """Prueba que el endpoint /status devuelva el estado correcto con código 200."""
    response = client.get("/status")
    
    assert response.status_code == 200
    assert response.json() == {"status": "ok", "exchanges": ["exchange_1", "exchange_2"]}

def test_status_endpoint_method_not_allowed(client):
    """Prueba que el endpoint /status rechace métodos no permitidos (como POST)."""
    response = client.post("/status")
    
    assert response.status_code == 405
    assert response.json() == {"detail": "Method Not Allowed"}

# Pruebas para /exchange/{exchange_name}
def test_exchange_endpoint_valid_exchange(client):
    """Prueba que el endpoint /exchange devuelva un exchange válido con código 200."""
    response = client.get("/exchange/exchange_1")
    
    assert response.status_code == 200
    assert response.json() == {"exchange": "exchange_1"}

def test_exchange_endpoint_another_valid_exchange(client):
    """Prueba otro exchange válido para asegurar consistencia."""
    response = client.get("/exchange/exchange_2")
    
    assert response.status_code == 200
    assert response.json() == {"exchange": "exchange_2"}

def test_exchange_endpoint_invalid_exchange(client):
    """Prueba que el endpoint /exchange devuelva 404 para un exchange no válido."""
    response = client.get("/exchange/invalid_exchange")
    
    assert response.status_code == 404
    assert response.json() == {"detail": "Exchange not found"}

def test_exchange_endpoint_empty_name(client):
    """Prueba el manejo de un nombre de exchange vacío."""
    response = client.get("/exchange/")
    
    assert response.status_code == 404  # FastAPI devuelve 404 por ruta no encontrada
    assert "detail" in response.json()

def test_exchange_endpoint_special_characters(client):
    """Prueba el manejo de caracteres especiales en el nombre del exchange."""
    response = client.get("/exchange/exchange_@#$%")
    
    assert response.status_code == 404
    assert response.json() == {"detail": "Exchange not found"}

def test_exchange_endpoint_method_not_allowed(client):
    """Prueba que el endpoint /exchange rechace métodos no permitidos (como POST)."""
    response = client.post("/exchange/exchange_1")
    
    assert response.status_code == 405
    assert response.json() == {"detail": "Method Not Allowed"}

# Pruebas adicionales para robustez
def test_non_existent_endpoint(client):
    """Prueba el manejo de un endpoint inexistente."""
    response = client.get("/nonexistent")
    
    assert response.status_code == 404
    assert response.json() == {"detail": "Not Found"}

def test_root_endpoint(client):
    """Prueba el comportamiento del endpoint raíz si no está definido."""
    response = client.get("/")
    
    assert response.status_code == 404
    assert response.json() == {"detail": "Not Found"}

# Ejecutar las pruebas
if __name__ == "__main__":
    pytest.main(["-v"])