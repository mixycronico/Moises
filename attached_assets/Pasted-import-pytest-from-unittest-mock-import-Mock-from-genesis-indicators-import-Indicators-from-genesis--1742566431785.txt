import pytest
from unittest.mock import Mock
from genesis.indicators import Indicators
from genesis.signals import SignalGenerator

# Fixtures
@pytest.fixture
def indicators():
    """Fixture que proporciona una instancia de Indicators."""
    return Indicators()

@pytest.fixture
def signal_generator(indicators):
    """Fixture que proporciona una instancia de SignalGenerator con Indicators."""
    return SignalGenerator(indicators)

# Pruebas para generate_ema_signal
def test_signal_generator_ema_crossover_buy(signal_generator, indicators):
    """Prueba que un cruce ascendente de EMA genere una señal de compra."""
    prices = [5000, 5100, 5200, 5300, 5400]
    ema_short = [5020, 5120, 5220, 5320, 5420]  # EMA corta sube más rápido
    ema_long = [5030, 5130, 5230, 5330, 5410]   # EMA larga más lenta
    
    indicators.calculate_ema = Mock(side_effect=[ema_short, ema_long])
    signal = signal_generator.generate_ema_signal(prices, short_period=9, long_period=21)
    
    # Cruce ascendente (ema_short cruza por encima de ema_long en el último punto)
    assert signal == "BUY"
    indicators.calculate_ema.assert_any_call(prices, 9)
    indicators.calculate_ema.assert_any_call(prices, 21)

def test_signal_generator_ema_crossover_sell(signal_generator, indicators):
    """Prueba que un cruce descendente de EMA genere una señal de venta."""
    prices = [5400, 5300, 5200, 5100, 5000]
    ema_short = [5420, 5320, 5220, 5120, 5020]  # EMA corta baja más rápido
    ema_long = [5410, 5330, 5230, 5130, 5030]   # EMA larga más lenta
    
    indicators.calculate_ema = Mock(side_effect=[ema_short, ema_long])
    signal = signal_generator.generate_ema_signal(prices, short_period=9, long_period=21)
    
    # Cruce descendente (ema_short cruza por debajo de ema_long en el último punto)
    assert signal == "SELL"

def test_signal_generator_ema_no_crossover(signal_generator, indicators):
    """Prueba que no haya señal si no hay cruce de EMA."""
    prices = [5000, 5100, 5200, 5300, 5400]
    ema_short = [5020, 5120, 5220, 5320, 5420]  # EMA corta siempre por encima
    ema_long = [5010, 5110, 5210, 5310, 5410]   # EMA larga siempre por debajo
    
    indicators.calculate_ema = Mock(side_effect=[ema_short, ema_long])
    signal = signal_generator.generate_ema_signal(prices, short_period=9, long_period=21)
    
    assert signal == "NEUTRAL"

def test_signal_generator_ema_invalid_periods(signal_generator, indicators):
    """Prueba el manejo de períodos inválidos en EMA."""
    prices = [5000, 5100, 5200]
    
    with pytest.raises(ValueError, match="Periods must be positive"):
        signal_generator.generate_ema_signal(prices, short_period=0, long_period=21)
    
    with pytest.raises(ValueError, match="Short period must be less than long period"):
        signal_generator.generate_ema_signal(prices, short_period=21, long_period=9)

def test_signal_generator_ema_insufficient_data(signal_generator, indicators):
    """Prueba el manejo de datos insuficientes para EMA."""
    prices = [5000]  # Menos datos que el período largo
    
    with pytest.raises(ValueError, match="Not enough data"):
        signal_generator.generate_ema_signal(prices, short_period=9, long_period=21)

# Pruebas para generate_rsi_signal
def test_signal_generator_rsi_overbought(signal_generator, indicators):
    """Prueba que un RSI alto genere una señal de venta."""
    prices = [5000, 5100, 5200, 5300, 5400]
    mock_rsi = 75  # RSI > 70, sobrecompra
    
    indicators.calculate_rsi = Mock(return_value=mock_rsi)
    signal = signal_generator.generate_rsi_signal(prices, period=14)
    
    assert signal == "SELL"
    indicators.calculate_rsi.assert_called_once_with(prices, 14)

def test_signal_generator_rsi_oversold(signal_generator, indicators):
    """Prueba que un RSI bajo genere una señal de compra."""
    prices = [5400, 5300, 5200, 5100, 5000]
    mock_rsi = 25  # RSI < 30, sobreventa
    
    indicators.calculate_rsi = Mock(return_value=mock_rsi)
    signal = signal_generator.generate_rsi_signal(prices, period=14)
    
    assert signal == "BUY"

def test_signal_generator_rsi_neutral(signal_generator, indicators):
    """Prueba que un RSI intermedio genere una señal neutral."""
    prices = [5000, 5100, 5200]
    mock_rsi = 45  # 30 < RSI < 70, zona neutral
    
    indicators.calculate_rsi = Mock(return_value=mock_rsi)
    signal = signal_generator.generate_rsi_signal(prices, period=14)
    
    assert signal == "NEUTRAL"

def test_signal_generator_rsi_invalid_period(signal_generator, indicators):
    """Prueba el manejo de períodos inválidos en RSI."""
    prices = [5000, 5100, 5200]
    
    with pytest.raises(ValueError, match="Period must be positive"):
        signal_generator.generate_rsi_signal(prices, period=0)

def test_signal_generator_rsi_insufficient_data(signal_generator, indicators):
    """Prueba el manejo de datos insuficientes para RSI."""
    prices = [5000, 5100]  # Menos datos que el período
    
    with pytest.raises(ValueError, match="Not enough data"):
        signal_generator.generate_rsi_signal(prices, period=14)

# Pruebas para generate_macd_signal
def test_signal_generator_macd_bullish(signal_generator, indicators):
    """Prueba que un cruce alcista del MACD genere una señal de compra."""
    prices = [5000, 5100, 5200, 5300, 5400]
    mock_macd_line = [3, 4, 5, 6, 7]      # MACD subiendo
    mock_signal_line = [2, 3, 4, 5, 6]    # Signal más lento, cruce alcista
    
    indicators.calculate_macd = Mock(return_value=(mock_macd_line, mock_signal_line))
    signal = signal_generator.generate_macd_signal(prices, fast=12, slow=26, signal_period=9)
    
    assert signal == "BUY"
    indicators.calculate_macd.assert_called_once_with(prices, 12, 26, 9)

def test_signal_generator_macd_bearish(signal_generator, indicators):
    """Prueba que un cruce bajista del MACD genere una señal de venta."""
    prices = [5400, 5300, 5200, 5100, 5000]
    mock_macd_line = [7, 6, 5, 4, 3]      # MACD bajando
    mock_signal_line = [6, 5, 4, 3, 2]    # Signal más lento, cruce bajista
    
    indicators.calculate_macd = Mock(return_value=(mock_macd_line, mock_signal_line))
    signal = signal_generator.generate_macd_signal(prices, fast=12, slow=26, signal_period=9)
    
    assert signal == "SELL"

def test_signal_generator_macd_neutral(signal_generator, indicators):
    """Prueba que no haya señal si no hay cruce en el MACD."""
    prices = [5000, 5100, 5200]
    mock_macd_line = [5, 6, 7]      # MACD siempre por encima
    mock_signal_line = [3, 4, 5]    # Signal siempre por debajo
    
    indicators.calculate_macd = Mock(return_value=(mock_macd_line, mock_signal_line))
    signal = signal_generator.generate_macd_signal(prices, fast=12, slow=26, signal_period=9)
    
    assert signal == "NEUTRAL"

def test_signal_generator_macd_invalid_periods(signal_generator, indicators):
    """Prueba el manejo de períodos inválidos en MACD."""
    prices = [5000, 5100, 5200]
    
    with pytest.raises(ValueError, match="Periods must be positive"):
        signal_generator.generate_macd_signal(prices, fast=0, slow=26, signal_period=9)
    
    with pytest.raises(ValueError, match="Fast period must be less than slow period"):
        signal_generator.generate_macd_signal(prices, fast=26, slow=12, signal_period=9)

def test_signal_generator_macd_insufficient_data(signal_generator, indicators):
    """Prueba el manejo de datos insuficientes para MACD."""
    prices = [5000, 5100]  # Menos datos que el período lento
    
    with pytest.raises(ValueError, match="Not enough data"):
        signal_generator.generate_macd_signal(prices, fast=12, slow=26, signal_period=9)

# Ejecutar las pruebas
if __name__ == "__main__":
    pytest.main(["-v"])