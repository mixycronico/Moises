Security





import base64
import hashlib
import hmac
import asyncio
from typing import Tuple
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Util.Padding import pad, unpad
import logging

# Logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger("AESCipher")

class AESCipher:
    """Cifra y descifra datos sensibles usando AES-GCM o AES-CBC + HMAC con derivación segura de clave."""
    
    def __init__(self, key: str, use_gcm: bool = True, salt: Optional[bytes] = None):
        self.bs = AES.block_size  # 16 bytes
        self.use_gcm = use_gcm  # AES-GCM por defecto, más seguro
        self.salt = salt if salt else get_random_bytes(16)  # Salt único por instancia
        # Derivar clave con PBKDF2 (más seguro que SHA-256 directo)
        self.key = PBKDF2(key.encode(), self.salt, dkLen=32, count=100000, 
                         prf=lambda p, s: hmac.new(p, s, hashlib.sha256).digest())
        self.hmac_key = PBKDF2(key.encode(), self.salt + b"hmac", dkLen=32, count=100000,
                              prf=lambda p, s: hmac.new(p, s, hashlib.sha256).digest())

    def encrypt(self, raw: str) -> str:
        """Cifra datos con AES-GCM o AES-CBC + HMAC."""
        if not isinstance(raw, str) or not raw.strip():
            raise ValueError("Datos a cifrar deben ser una cadena no vacía")

        if self.use_gcm:
            return self._encrypt_gcm(raw)
        else:
            return self._encrypt_cbc_hmac(raw)

    def decrypt(self, enc: str) -> str:
        """Descifra datos con AES-GCM o AES-CBC + HMAC."""
        if not isinstance(enc, str) or not enc.strip():
            raise ValueError("Datos cifrados deben ser una cadena no vacía")

        if self.use_gcm:
            return self._decrypt_gcm(enc)
        else:
            return self._decrypt_cbc_hmac(enc)

    def _encrypt_gcm(self, raw: str) -> str:
        """Cifrado autenticado con AES-GCM."""
        iv = get_random_bytes(12)  # 12 bytes recomendado para GCM
        cipher = AES.new(self.key, AES.MODE_GCM, nonce=iv)
        ciphertext, tag = cipher.encrypt_and_digest(raw.encode('utf-8'))
        # Concatenar: IV (12) + Tag (16) + Ciphertext
        result = iv + tag + ciphertext
        return base64.b64encode(result).decode('utf-8')

    def _decrypt_gcm(self, enc: str) -> str:
        """Descifrado autenticado con AES-GCM."""
        try:
            enc_bytes = base64.b64decode(enc)
            iv = enc_bytes[:12]
            tag = enc_bytes[12:28]
            ciphertext = enc_bytes[28:]
            cipher = AES.new(self.key, AES.MODE_GCM, nonce=iv)
            plaintext = cipher.decrypt_and_verify(ciphertext, tag)
            return plaintext.decode('utf-8')
        except (ValueError, KeyError) as e:
            logger.error(f"Error al descifrar con GCM: {e}")
            raise ValueError("Datos corruptos o clave incorrecta")

    def _encrypt_cbc_hmac(self, raw: str) -> str:
        """Cifrado con AES-CBC y autenticación HMAC."""
        raw_padded = pad(raw.encode('utf-8'), self.bs)
        iv = get_random_bytes(self.bs)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        encrypted = cipher.encrypt(raw_padded)
        # Calcular HMAC sobre IV + ciphertext
        hmac_value = hmac.new(self.hmac_key, iv + encrypted, hashlib.sha256).digest()
        # Concatenar: IV (16) + HMAC (32) + Ciphertext
        result = iv + hmac_value + encrypted
        return base64.b64encode(result).decode('utf-8')

    def _decrypt_cbc_hmac(self, enc: str) -> str:
        """Descifrado con AES-CBC y verificación HMAC."""
        try:
            enc_bytes = base64.b64decode(enc)
            iv = enc_bytes[:self.bs]
            hmac_value = enc_bytes[self.bs:self.bs + 32]
            ciphertext = enc_bytes[self.bs + 32:]
            # Verificar HMAC
            expected_hmac = hmac.new(self.hmac_key, iv + ciphertext, hashlib.sha256).digest()
            if not hmac.compare_digest(hmac_value, expected_hmac):
                raise ValueError("HMAC no coincide. Datos manipulados.")
            cipher = AES.new(self.key, AES.MODE_CBC, iv)
            decrypted = unpad(cipher.decrypt(ciphertext), self.bs)
            return decrypted.decode('utf-8')
        except (ValueError, KeyError) as e:
            logger.error(f"Error al descifrar con CBC+HMAC: {e}")
            raise ValueError("Datos corruptos o clave incorrecta")

    def get_salt(self) -> str:
        """Devuelve el salt en base64 para almacenamiento seguro."""
        return base64.b64encode(self.salt).decode('utf-8')

    async def stress_test(self, num_messages: int):
        """Prueba de estrés con cifrado/descifrado masivo."""
        messages = [f"Test message {i}" for i in range(num_messages)]
        tasks_encrypt = [asyncio.to_thread(self.encrypt, msg) for msg in messages]
        start_time = time.time()
        
        # Cifrar concurrentemente
        encrypted = await asyncio.gather(*tasks_encrypt)
        logger.info(f"Cifrado de {num_messages} mensajes en {time.time() - start_time:.2f}s")

        # Descifrar concurrentemente
        tasks_decrypt = [asyncio.to_thread(self.decrypt, enc) for enc in encrypted]
        decrypted = await asyncio.gather(*tasks_decrypt, return_exceptions=True)
        elapsed = time.time() - start_time

        # Verificar integridad
        failures = sum(1 for orig, dec in zip(messages, decrypted) if isinstance(dec, Exception) or orig != dec)
        logger.info(f"Prueba completada en {elapsed:.2f}s. Fallos: {failures}/{num_messages}")

# Prueba
if __name__ == "__main__":
    key = "mysecretpassword"
    cipher = AESCipher(key, use_gcm=True)

    # Prueba simple
    original = "Datos sensibles"
    encrypted = cipher.encrypt(original)
    decrypted = cipher.decrypt(encrypted)
    print(f"Original: {original}")
    print(f"Cifrado: {encrypted}")
    print(f"Descifrado: {decrypted}")
    print(f"Salt: {cipher.get_salt()}")

    # Prueba de estrés
    print("\nIniciando prueba de estrés...")
    asyncio.run(cipher.stress_test(100000))
















Analytics manager




import json
import logging
import os
from typing import Dict, Any, List, Optional
from collections import deque
from datetime import datetime
import matplotlib.pyplot as plt
import numpy as np
from concurrent.futures import ThreadPoolExecutor
import asyncio
from aiofile import async_open  # Para operaciones asíncronas de I/O

# Configuración de logging
logger = logging.getLogger("AnalyticsManager")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()],
)


class AnalyticsManager:
    """
    Analiza el rendimiento de estrategias y genera gráficos de rendimiento de manera eficiente.
    """
    def __init__(self, historial_path: str = "data/performance.json", max_hist: int = 1000):
        self.historial_path = historial_path
        self.history: Dict[str, deque] = {}
        self.max_hist = max(0, max_hist)  # Evita valores negativos
        self.executor = ThreadPoolExecutor(max_workers=5)
        self.loop = asyncio.get_event_loop()
        if os.path.exists(historial_path):
            self.loop.run_until_complete(self._load_history())

    async def _load_history(self) -> None:
        """Carga el historial de manera asíncrona."""
        try:
            async with async_open(self.historial_path, "r") as f:
                data = json.loads(await f.read())
            self.history = {
                k: deque(v, maxlen=self.max_hist)
                for k, v in data.get("history", {}).items()
            }
            logger.info("Historial de rendimiento cargado correctamente.")
        except (json.JSONDecodeError, IOError) as e:
            logger.warning(f"No se pudo cargar historial: {type(e).__name__} - {e}")

    async def _save_history(self) -> None:
        """Guarda el historial de manera asíncrona."""
        try:
            os.makedirs(os.path.dirname(self.historial_path), exist_ok=True)
            async with async_open(self.historial_path, "w") as f:
                await f.write(
                    json.dumps(
                        {"history": {k: list(v) for k, v in self.history.items()}},
                        indent=2,
                    )
                )
        except (IOError, TypeError) as e:
            logger.error(f"Error al guardar historial: {type(e).__name__} - {e}")

    async def registrar_resultado(self, strategy_name: str, score: float) -> None:
        """Registra un resultado de forma asíncrona con validación."""
        if not isinstance(strategy_name, str) or not strategy_name.strip():
            raise ValueError("El nombre de la estrategia debe ser una cadena no vacía.")
        if not isinstance(score, (int, float)) or not (-float("inf") < score < float("inf")):
            raise ValueError("El score debe ser un número finito.")

        strategy_name = strategy_name.strip()
        if strategy_name not in self.history:
            self.history[strategy_name] = deque(maxlen=self.max_hist)
        self.history[strategy_name].append(
            {"timestamp": datetime.utcnow().isoformat(), "score": float(score)}
        )
        await self._save_history()

    def calcular_promedio(self, strategy_name: str) -> Optional[float]:
        """Calcula el promedio de puntajes de una estrategia."""
        hist = self.history.get(strategy_name)
        if not hist:
            return None
        # Usamos np.mean directamente para mayor eficiencia
        return float(np.mean([entry["score"] for entry in hist]))

    def estrategia_recomendada(self) -> Optional[str]:
        """Devuelve la estrategia con el mejor promedio."""
        if not self.history:
            return None
        
        # Usamos un diccionario de comprensión y max en una sola pasada
        promedios = {name: self.calcular_promedio(name) for name in self.history}
        validos = {k: v for k, v in promedios.items() if v is not None}
        if not validos:
            return None
        
        mejor = max(validos, key=validos.get)
        logger.info(f"Estrategia recomendada: {mejor} ({validos[mejor]:.4f})")
        return mejor

    def generar_grafico(self, strategy_name: str, output_path: Optional[str] = None) -> None:
        """Genera un gráfico del rendimiento de una estrategia."""
        hist = self.history.get(strategy_name)
        if not hist:
            logger.warning(f"No hay historial para {strategy_name}")
            return

        fechas = np.array([datetime.fromisoformat(d["timestamp"]) for d in hist])
        scores = np.array([d["score"] for d in hist])

        plt.figure(figsize=(10, 4))
        plt.plot(fechas, scores, marker="o", linestyle="-", color="b", label=strategy_name)
        plt.title(f"Rendimiento de {strategy_name}", fontsize=12, pad=10)
        plt.xlabel("Fecha", fontsize=10)
        plt.ylabel("Score", fontsize=10)
        plt.legend()
        plt.grid(True, linestyle="--", alpha=0.7)
        plt.tight_layout()

        if output_path:
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            plt.savefig(output_path, dpi=300, bbox_inches="tight")
            plt.close()  # Cierra la figura para liberar memoria
            logger.info(f"Gráfico guardado en {output_path}")
        else:
            plt.show()

    def obtener_historial(self, strategy_name: str) -> List[Dict[str, Any]]:
        """Devuelve el historial de una estrategia."""
        return list(self.history.get(strategy_name, []))


# Prueba rápida
async def main():
    analytics = AnalyticsManager()
    
    # Simulación asíncrona
    await asyncio.gather(
        analytics.registrar_resultado("sma_crossover", 0.82),
        analytics.registrar_resultado("sma_crossover", 0.67),
        analytics.registrar_resultado("rsi", 0.61),
        analytics.registrar_resultado("macd", 0.44),
    )

    mejor = analytics.estrategia_recomendada()
    print(f"Estrategia recomendada: {mejor}")

    # Graficar
    analytics.generar_grafico("sma_crossover", output_path="data/plots/sma_crossover.png")


if __name__ == "__main__":
    asyncio.run(main())













