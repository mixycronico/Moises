import pytest
from unittest.mock import Mock
from genesis.alerts import AlertManager

# Fixture para AlertManager
@pytest.fixture
def alert_manager():
    """Fixture que proporciona una instancia de AlertManager con send_alert como mock."""
    manager = AlertManager()
    manager.send_alert = Mock()
    return manager

# Pruebas para check_drawdown
def test_alert_manager_drawdown_exceeds_limit(alert_manager):
    """Prueba que se envíe una alerta cuando el drawdown excede el límite."""
    drawdown = 20  # Mayor al límite típico (suponemos 15%)
    alert_manager.check_drawdown(drawdown)
    
    alert_manager.send_alert.assert_called_once_with("Drawdown excedido: 20%")

def test_alert_manager_drawdown_within_limit(alert_manager):
    """Prueba que no se envíe alerta cuando el drawdown está dentro del límite."""
    drawdown = 10  # Menor al límite típico (suponemos 15%)
    alert_manager.check_drawdown(drawdown)
    
    alert_manager.send_alert.assert_not_called()

def test_alert_manager_drawdown_at_limit(alert_manager):
    """Prueba el comportamiento cuando el drawdown está exactamente en el límite."""
    # Suponemos que el límite es 15% y que no se dispara si es igual (ajusta según tu lógica)
    drawdown = 15
    alert_manager.check_drawdown(drawdown)
    
    alert_manager.send_alert.assert_not_called()  # Cambia a assert_called_once si tu lógica dispara en el límite

def test_alert_manager_drawdown_negative(alert_manager):
    """Prueba el manejo de un drawdown negativo."""
    drawdown = -5  # Valor inválido o inesperado
    
    with pytest.raises(ValueError, match="Drawdown cannot be negative"):
        alert_manager.check_drawdown(drawdown)
    
    alert_manager.send_alert.assert_not_called()

def test_alert_manager_drawdown_excessive(alert_manager):
    """Prueba un drawdown extremadamente alto."""
    drawdown = 100  # 100%, pérdida total
    alert_manager.check_drawdown(drawdown)
    
    alert_manager.send_alert.assert_called_once_with("Drawdown excedido: 100%")

def test_alert_manager_custom_limit(alert_manager):
    """Prueba el comportamiento con un límite de drawdown personalizado."""
    # Suponemos que AlertManager permite configurar el límite (ajusta según tu implementación)
    alert_manager.drawdown_limit = 25  # Límite personalizado al 25%
    
    # Drawdown por debajo del límite
    alert_manager.check_drawdown(20)
    alert_manager.send_alert.assert_not_called()
    
    # Drawdown por encima del límite
    alert_manager.send_alert.reset_mock()
    alert_manager.check_drawdown(30)
    alert_manager.send_alert.assert_called_once_with("Drawdown excedido: 30%")

def test_alert_manager_send_alert_failure(alert_manager):
    """Prueba el manejo de un fallo en send_alert."""
    alert_manager.send_alert.side_effect = Exception("Failed to send alert")
    drawdown = 20
    
    # Verificamos que la excepción no se propague (ajusta si tu lógica la relanza)
    alert_manager.check_drawdown(drawdown)
    alert_manager.send_alert.assert_called_once_with("Drawdown excedido: 20%")

def test_alert_manager_invalid_limit_configuration(alert_manager):
    """Prueba la configuración de un límite inválido."""
    # Suponemos que AlertManager tiene un setter para drawdown_limit
    with pytest.raises(ValueError, match="Drawdown limit must be between 0 and 100"):
        alert_manager.drawdown_limit = -10
    
    with pytest.raises(ValueError, match="Drawdown limit must be between 0 and 100"):
        alert_manager.drawdown_limit = 150

def test_alert_manager_multiple_checks(alert_manager):
    """Prueba múltiples verificaciones consecutivas de drawdown."""
    # Primer chequeo: drawdown excede el límite
    alert_manager.check_drawdown(20)
    alert_manager.send_alert.assert_called_once_with("Drawdown excedido: 20%")
    
    # Segundo chequeo: drawdown sigue excediendo
    alert_manager.send_alert.reset_mock()
    alert_manager.check_drawdown(25)
    alert_manager.send_alert.assert_called_once_with("Drawdown excedido: 25%")
    
    # Tercer chequeo: drawdown dentro del límite
    alert_manager.send_alert.reset_mock()
    alert_manager.check_drawdown(10)
    alert_manager.send_alert.assert_not_called()

# Ejecutar las pruebas
if __name__ == "__main__":
    pytest.main(["-v"])