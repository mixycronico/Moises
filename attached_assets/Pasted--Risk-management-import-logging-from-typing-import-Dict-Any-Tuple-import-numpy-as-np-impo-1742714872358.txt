





Risk management




import logging
from typing import Dict, Any, Tuple
import numpy as np
import pandas as pd
import asyncio
import time

# Configuración de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ===== GESTOR DE RIESGO PRINCIPAL =====
class RiskManager:
    """Manejo de riesgo avanzado para operaciones de trading."""

    def __init__(self, config: Dict[str, Any]):
        self.max_risk_per_trade = config.get("max_risk_per_trade", 0.02)
        self.stop_loss_atr_multiplier = config.get("stop_loss_atr_multiplier", 2.0)
        self.trailing_stop_atr_multiplier = config.get("trailing_stop_atr_multiplier", 1.5)
        self.max_slippage = config.get("max_slippage", 0.001)
        self.logger = logging.getLogger("RiskManager")

    def calculate_position_size(self, capital: float, entry_price: float, atr: float) -> float:
        """Calcula el tamaño de la posición basado en el capital y el ATR."""
        risk_amount = capital * self.max_risk_per_trade
        stop_loss_distance = atr * self.stop_loss_atr_multiplier
        position_size = risk_amount / (stop_loss_distance * entry_price)
        self.logger.info(f"Posición calculada: {position_size} (capital: {capital}, ATR: {atr})")
        return round(position_size, 6)

    def apply_stop_loss(self, entry_price: float, side: str, atr: float) -> float:
        """Calcula el stop-loss dinámico basado en ATR."""
        stop_loss_distance = atr * self.stop_loss_atr_multiplier
        stop_loss = entry_price - stop_loss_distance if side == "buy" else entry_price + stop_loss_distance
        return round(stop_loss, 6)

    def apply_trailing_stop(self, current_price: float, highest_price: float, side: str, atr: float) -> float:
        """Calcula el trailing stop adaptativo basado en ATR."""
        trailing_stop_distance = atr * self.trailing_stop_atr_multiplier
        if side == "buy":
            trailing_stop = max(highest_price - trailing_stop_distance, self.apply_stop_loss(current_price, side, atr))
        else:
            trailing_stop = min(highest_price + trailing_stop_distance, self.apply_stop_loss(current_price, side, atr))
        return round(trailing_stop, 6)

# ===== CONTROLADOR DE SLIPPAGE =====
class SlippageController:
    """Maneja la validación del slippage en cada orden."""

    def __init__(self, base_max_slippage: float, liquidity_factor: float):
        self.base_max_slippage = base_max_slippage
        self.liquidity_factor = liquidity_factor
        self.logger = logging.getLogger("SlippageController")

    def validate_slippage(self, expected_price: float, execution_price: float, liquidity: float) -> bool:
        """Valida el slippage dinámicamente según liquidez."""
        dynamic_max_slippage = self.base_max_slippage * (1 + (self.liquidity_factor / liquidity))
        slippage = abs(execution_price - expected_price) / expected_price
        if slippage > dynamic_max_slippage:
            self.logger.warning(f"Slippage excesivo: {slippage:.6f} (límite: {dynamic_max_slippage:.6f})")
            return False
        return True

# ===== MANEJO DE LIQUIDEZ =====
class LiquidityChecker:
    """Evalúa la liquidez considerando la profundidad del order book."""

    def __init__(self, min_liquidity: float, depth_levels: int):
        self.min_liquidity = min_liquidity
        self.depth_levels = depth_levels
        self.logger = logging.getLogger("LiquidityChecker")

    def check_liquidity(self, order_book: Dict[str, Any]) -> bool:
        """Verifica la liquidez en múltiples niveles del order book."""
        bids = order_book.get("bids", [])[:self.depth_levels]
        asks = order_book.get("asks", [])[:self.depth_levels]
        bid_volume = sum([bid[1] for bid in bids])  # [precio, volumen]
        ask_volume = sum([ask[1] for ask in asks])
        liquidity = min(bid_volume, ask_volume)
        if liquidity >= self.min_liquidity:
            return True
        self.logger.warning(f"Liquidez insuficiente: {liquidity} < {self.min_liquidity}")
        return False

# ===== MANEJO DE FALLAS Y RECUPERACIÓN =====
class FailoverHandler:
    """Maneja fallas y reintentos en múltiples exchanges."""

    def __init__(self, retry_attempts: int = 3, backoff_factor: float = 2.0):
        self.retry_attempts = retry_attempts
        self.backoff_factor = backoff_factor
        self.logger = logging.getLogger("FailoverHandler")

    async def execute_with_failover(self, execute_trade, *args) -> Tuple[bool, Any]:
        """Ejecuta la orden con reintentos y backoff exponencial."""
        for attempt in range(self.retry_attempts):
            try:
                result = await execute_trade(*args)
                return True, result
            except Exception as e:
                wait_time = self.backoff_factor ** attempt
                self.logger.warning(f"Error (intento {attempt + 1}/{self.retry_attempts}): {e}. Esperando {wait_time}s")
                await asyncio.sleep(wait_time)
        return False, "Falló tras múltiples intentos"

# ===== EJEMPLO DE USO ASÍNCRONO =====
async def simulate_trade(price: float) -> float:
    """Simula la ejecución de una orden."""
    await asyncio.sleep(0.1)  # Simula latencia
    if np.random.random() < 0.2:  # 20% de probabilidad de fallo
        raise Exception("Fallo simulado en el exchange")
    return price * 1.001  # Simula ejecución con pequeño slippage

async def main():
    config = {
        "max_risk_per_trade": 0.02,
        "stop_loss_atr_multiplier": 2.0,
        "trailing_stop_atr_multiplier": 1.5,
        "max_slippage": 0.001
    }

    risk_manager = RiskManager(config)
    slippage_controller = SlippageController(base_max_slippage=0.001, liquidity_factor=1.0)
    liquidity_checker = LiquidityChecker(min_liquidity=1000, depth_levels=5)
    failover_handler = FailoverHandler(retry_attempts=3, backoff_factor=2.0)

    # Ejemplo de uso
    capital = 10000
    entry_price = 50000
    atr = 100  # ATR simulado
    trade_size = risk_manager.calculate_position_size(capital, entry_price, atr)
    stop_loss = risk_manager.apply_stop_loss(entry_price, "buy", atr)
    trailing_stop = risk_manager.apply_trailing_stop(50500, 51000, "buy", atr)

    print(f"Tamaño de la posición: {trade_size}")
    print(f"Stop-Loss: {stop_loss}")
    print(f"Trailing Stop: {trailing_stop}")

    # Validación de slippage
    execution_price = 50010
    liquidity = 1500
    slippage_valid = slippage_controller.validate_slippage(entry_price, execution_price, liquidity)
    print(f"Slippage válido: {slippage_valid}")

    # Verificación de liquidez
    order_book = {
        "bids": [[49990, 500], [49980, 400], [49970, 600]],
        "asks": [[50010, 450], [50020, 550], [50030, 700]]
    }
    liquidity_ok = liquidity_checker.check_liquidity(order_book)
    print(f"Liquidez suficiente: {liquidity_ok}")

    # Ejecución con failover
    success, result = await failover_handler.execute_with_failover(simulate_trade, entry_price)
    print(f"Ejecución exitosa: {success}, Resultado: {result}")

if __name__ == "__main__":
    asyncio.run(main())