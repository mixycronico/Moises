Market data




import asyncio
import logging
import random
import numpy as np
import pandas as pd
from typing import Dict, List

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

class MarketData:
    """Gestor de datos de mercado con manejo de concurrencia y cálculo de ATR."""

    def __init__(self, api_clients: Dict[str, object], update_interval: float = 5.0, max_concurrent: int = 50):
        self.api_clients = api_clients
        self.update_interval = update_interval
        self.semaphore = asyncio.Semaphore(max_concurrent)
        self.data = {}
        self.active_symbols = set()
        self.logger = logging.getLogger("MarketData")

    async def fetch_symbol_data(self, symbol: str, exchange_name: str, client):
        """Obtiene datos del mercado de un símbolo desde un exchange."""
        async with self.semaphore:
            try:
                data = await 
client.fetch_market_data(symbol)
                if not data or "price" not in data or data["price"] <= 0:
                    self.logger.error(f"Datos inválidos de {exchange_name} para {symbol}")
                    return
                self.data.setdefault(symbol, {})[exchange_name] = data
                self.logger.info(f"Actualizado {symbol} en {exchange_name}: {data['price']}")
            except Exception as e:
                self.logger.warning(f"Error en {exchange_name} para {symbol}: {e}")

    def start_update_loop(self, symbols: List[str]):
        """Inicia la actualización constante de datos de los símbolos dados."""
        self.active_symbols = set(symbols)
        asyncio.create_task(self.update_loop())

    async def update_loop(self):
        """Loop principal para actualizar datos de todos los símbolos activos."""
        while True:
            tasks = [
                self.fetch_symbol_data(symbol, ex, client)
                for symbol in self.active_symbols
                for ex, client in self.api_clients.items()
            ]
            await asyncio.gather(*tasks)
            await asyncio.sleep(self.update_interval)

    def get_price(self, symbol: str, exchange_name: str) -> float:
        return self.data.get(symbol, {}).get(exchange_name, {}).get("price", 0)

    def get_ohlcv(self, symbol: str, exchange_name: str) -> List:
        return self.data.get(symbol, {}).get(exchange_name, {}).get("ohlcv", [])

    def get_atr(self, symbol: str, exchange_name: str, period: int = 14) -> float:
        """Calcula el ATR desde el OHLCV."""
        ohlcv = self.get_ohlcv(symbol, exchange_name)
        if len(ohlcv) < period + 1:
            return 0.0
        df = pd.DataFrame(ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"])
        high = df["high"]
        low = df["low"]
        close = df["close"]
        prev_close = close.shift(1)
        tr = pd.concat([
            high - low,
            (high - prev_close).abs(),
            (low - prev_close).abs()
        ], axis=1).max(axis=1)
        atr = tr.rolling(window=period).mean().iloc[-1]
        return round(atr, 6) if not np.isnan(atr) else 0.0

class SlippageController:
    """Valida slippage dinámico basado en ATR."""
    
    def __init__(self, base_max_slippage: float, market_data: MarketData):
        self.base_max_slippage = base_max_slippage
        self.market_data = market_data
        self.logger = logging.getLogger("SlippageController")

    def get_dynamic_slippage(self, symbol: str, exchange_name: str) -> float:
        atr = self.market_data.get_atr(symbol, exchange_name)
        return min(self.base_max_slippage * (1 + atr / 100), 0.01)  # 1% máx

    def validate_slippage(self, entry_price: float, execution_price: float, symbol: str, exchange_name: str) -> bool:
        max_slippage = self.get_dynamic_slippage(symbol, exchange_name)
        real_slippage = abs(execution_price - entry_price) / entry_price
        if real_slippage > max_slippage:
            self.logger.warning(f"Slippage alto en {symbol}: {real_slippage:.6f} > {max_slippage:.6f}")
            return False
        return True

class TradingEngine:
    """Simulación de motor de trading que valida condiciones antes de operar."""

    def __init__(self, market_data: MarketData):
        self.market_data = market_data
        self.logger = logging.getLogger("TradingEngine")

    def execute_trade(self, strategy_name: str, trading_pair: str, side: str, capital: float) -> Dict:
        atr = self.market_data.get_atr(trading_pair, "binance")
        if atr > 0.05:  # Umbral de alta volatilidad
            self.logger.critical(f"ATR elevado en {trading_pair} ({atr}), pausando operación.")
            return {"status": "paused", "reason": "Volatilidad extrema"}
        # Aquí vendría la lógica de ejecución real
        self.logger.info(f"Ejecución de estrategia {strategy_name} en {trading_pair} con ${capital}")
        return {"status": "executed", "exchange": "binance", "price": self.market_data.get_price(trading_pair, "binance")}

# ===== SIMULACIÓN DE CONDICIONES EXTREMAS =====

async def simulate_extreme_conditions(engine: TradingEngine):
    symbol = "BTC/USDT"
    simulated_price = 50000 * (1 + random.uniform(-0.1, 0.1))
    simulated_ohlcv = [[t, 50000, 51000, 49000,
                        50000 * (1 + random.uniform(-0.1, 0.1)), 100]
                       for t in range(100)]
    
    engine.market_data.data[symbol] = {
        "binance": {
            "price": simulated_price,
            "ohlcv": simulated_ohlcv
        }
    }

    result = engine.execute_trade("sma_crossover", symbol, "buy", 1000)
    print(f"Resultado: {result}")

# ===== EJECUCIÓN =====

if __name__ == "__main__":
    class DummyClient:
        async def fetch_market_data(self, symbol):
            return {
                "price": 50000 * (1 + random.uniform(-0.01, 0.01)),
                "ohlcv": [[t, 50000, 51000, 49000, 50000 * (1 + random.uniform(-0.01, 0.01)), 100] for t in range(100)]
            }

    dummy_clients = {"binance": DummyClient()}
    market_data = MarketData(dummy_clients)
    slippage_controller = SlippageController(base_max_slippage=0.001, market_data=market_data)
    engine = TradingEngine(market_data)

    asyncio.run(simulate_extreme_conditions(engine))
















Trading





import logging
import asyncio
import random
from typing import Dict, Any, Optional
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor

# Configuración de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# Simulación de dependencias mínimas
class ExchangeClient:
    def __init__(self, config):
        self.api_key = config["api_key"]
        self.fail_rate = random.random()  # Probabilidad de fallo para simulación

    def get_current_price(self, pair):
        return random.uniform(40000, 60000) if random.random() > self.fail_rate else None

    def place_order(self, pair, side, size):
        if random.random() < self.fail_rate:
            raise Exception("Simulated API failure")
        return {"order_id": "123", "executed_price": self.get_current_price(pair), "size": size}

class ExchangeManager:
    def __init__(self, config):
        self.exchanges = {name: ExchangeClient(conf) for name, conf in config.items()}
        self.failures = {name: 0 for name in config}
        self.max_failures = 5

    def get_best_exchange(self, pair):
        available = [name for name, count in self.failures.items() if count < self.max_failures]
        return random.choice(available) if available else None

    def report_failure(self, name):
        self.failures[name] += 1

class RiskManager:
    def __init__(self, config):
        self.max_risk = config["max_risk_per_trade"]
        self.stop_loss_pct = config["stop_loss_percent"]

    def calculate_position_size(self, capital, price):
        return (capital * self.max_risk) / price if price > 0 else 0

    def apply_stop_loss(self, price, side):
        return price * (1 - self.stop_loss_pct) if side == "buy" else price * (1 + self.stop_loss_pct)

class SlippageController:
    def __init__(self, max_slippage):
        self.max_slippage = max_slippage

    def validate_slippage(self, entry_price, execution_price):
        return abs(execution_price - entry_price) / entry_price <= self.max_slippage if entry_price > 0 else False

class FailoverHandler:
    def __init__(self, retry_attempts):
        self.retries = retry_attempts

    def execute_with_failover(self, func, *args):
        for attempt in range(self.retries + 1):
            try:
                result = func(*args)
                return True, result
            except Exception as e:
                logging.warning(f"Fallo en intento {attempt + 1}/{self.retries + 1}: {e}")
                if attempt == self.retries:
                    return False, str(e)
                asyncio.sleep(1)  # Simula espera entre reintentos

class Strategy:
    def __init__(self, config):
        self.config = config

    def generate_signal(self, market_data):
        return random.choice(["buy", "sell"])  # Simulación simple

class StrategyFactory:
    def create_strategy(self, name, config):
        return Strategy(config)

class MarketData:
    def __init__(self, config):
        self.source = config["source"]

    def get_data(self, pair):
        # Simulación de datos extremos
        prices = [50000 * (1 + random.uniform(-0.5, 1.0)) for _ in range(10)]  # Volatilidad extrema
        return {"prices": prices}

# Motor de Trading Mejorado
class TradingEngine:
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.exchange_manager = ExchangeManager(config["exchanges"])
        self.risk_manager = RiskManager(config["risk_management"])
        self.slippage_controller = SlippageController(config["risk_management"]["max_slippage"])
        self.failover_handler = FailoverHandler(config["failover"]["retry_attempts"])
        self.strategy_factory = StrategyFactory()
        self.market_data = MarketData(config["market_data"])
        self.executor = ThreadPoolExecutor(max_workers=10)  # Para operaciones concurrentes
        self.volatility_threshold = 0.1  # Umbral para pausar en volatilidad extrema

    async def execute_trade(self, strategy_name: str, trading_pair: str, side: str, capital: float) -> Dict[str, Any]:
        # Validación de entrada
        if capital <= 0 or not trading_pair or side not in ["buy", "sell"]:
            return {"status": "error", "message": "Parámetros inválidos"}

        # Obtener datos de mercado
        try:
            market_data = await asyncio.to_thread(self.market_data.get_data, trading_pair)
            if not market_data or "prices" not in market_data or not market_data["prices"]:
                return {"status": "error", "message": "Datos de mercado inválidos"}
        except Exception as e:
            logging.error(f"Error obteniendo datos de mercado: {e}")
            return {"status": "error", "message": "Fallo en datos de mercado"}

        # Chequeo de volatilidad extrema
        price_volatility = 
max(market_data["prices"]) / min(market_data["prices"]) - 1
        if price_volatility > self.volatility_threshold:
            logging.critical(f"Volatilidad extrema detectada ({price_volatility:.2%}). Pausando.")
            return {"status": "paused", "reason": "Volatilidad extrema"}

        # Seleccionar estrategia y generar señal
        strategy = self.strategy_factory.create_strategy(strategy_name, self.config["strategies"][strategy_name])
        signal = strategy.generate_signal(market_data)
        if signal != side:
            logging.warning(f"Estrategia {strategy_name} sugiere {signal}, pero se intentó {side}.")
            return {"status": "canceled", "reason": "Señal no coincide"}

        # Obtener el mejor exchange
        best_exchange = self.exchange_manager.get_best_exchange(trading_pair)
        if not best_exchange:
            logging.error("No se encontró un exchange adecuado.")
            return {"status": "error", "message": "No suitable exchange found"}

        # Calcular tamaño de la orden
        entry_price = market_data["prices"][-1]
        position_size = self.risk_manager.calculate_position_size(capital, entry_price)
        stop_loss = self.risk_manager.apply_stop_loss(entry_price, side)

        # Validar slippage
        execution_price = self.exchange_manager.exchanges[best_exchange].get_current_price(trading_pair)
        if execution_price is None or not self.slippage_controller.validate_slippage(entry_price, execution_price):
            logging.warning(f"Slippage muy alto o precio inválido en {best_exchange}.")
            return {"status": "error", "message": "Slippage demasiado alto"}

        # Ejecutar la orden con failover
        success, result = self.failover_handler.execute_with_failover(
            self.exchange_manager.exchanges[best_exchange].place_order,
            trading_pair, side, position_size
        )

        if success:
            logging.info(f"Orden ejecutada con éxito en {best_exchange}: {result}")
            return {"status": "success", "exchange": best_exchange, "order_details": result}
        else:
            self.exchange_manager.report_failure(best_exchange)
            logging.error("Fallo en la ejecución tras reintentos.")
            return {"status": "error", "message": "Orden no ejecutada"}

    async def stress_test(self, num_trades: int):
        tasks = [
            self.execute_trade("sma_crossover", "BTC/USDT", random.choice(["buy", "sell"]), 1000)
            for _ in range(num_trades)
        ]
        results = await asyncio.gather(*tasks)
        return results

# Configuración y Prueba
if __name__ == "__main__":
    config = {
        "exchanges": {
            "binance": {"api_key": "XXXX", "api_secret": "YYYY"},
            "bybit": {"api_key": "AAAA", "api_secret": "BBBB"},
        },
        "risk_management": {
            "max_risk_per_trade": 0.02,
            "stop_loss_percent": 0.01,
            "trailing_stop": True,
            "trailing_stop_percent": 0.005,
            "max_slippage": 0.001
        },
        "failover": {"retry_attempts": 3},
        "market_data": {"source": "binance"},
        "strategies": {
            "sma_crossover": {"short_window": 5, "long_window": 20},
            "rsi": {"rsi_period": 14},
            "macd": {"fast_period": 12, "slow_period": 26, "signal_period": 9},
        }
    }

    trading_engine = TradingEngine(config)

    # Prueba simple
    result = asyncio.run(trading_engine.execute_trade("sma_crossover", "BTC/USDT", "buy", 1000))
    print("Prueba simple:", result)

    # Prueba de estrés: 100 operaciones simultáneas
    print("\nIniciando prueba de estrés...")
    stress_results = asyncio.run(trading_engine.stress_test(100))
    successes = sum(1 for r in stress_results if r["status"] == "success")
    print(f"Prueba de estrés completada: {successes}/100 operaciones exitosas")




















Order manager




import logging
import asyncio
import random
from typing import Dict, Any, Optional
from decimal import Decimal
from concurrent.futures import ThreadPoolExecutor

# Configuración del log
logger = logging.getLogger("OrderManager")
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# Simulación de dependencias mínimas
class ExchangeClient:
    async def place_order(self, symbol, side, amount, price):
        if random.random() < 0.2:  # 20% de fallo simulado
            raise Exception("Simulated API failure")
        await asyncio.sleep(random.uniform(0.1, 0.5))  # Latencia artificial
        return {"order_id": f"ord_{random.randint(1000, 9999)}", "executed_price": price * (1 + random.uniform(-0.05, 0.05))}

    async def cancel_order(self, order_id):
        await asyncio.sleep(0.1)  # Simula latencia
        return True

class ExchangeManager:
    def __init__(self):
        self.exchanges = {"binance": ExchangeClient(), "bybit": ExchangeClient()}
        self.failures = {"binance": 0, "bybit": 0}
        self.max_failures = 5

    def get_best_exchange(self, symbol):
        available = [ex for ex, count in self.failures.items() if count < self.max_failures]
        return random.choice(available) if available else None

    def report_failure(self, exchange_name):
        self.failures[exchange_name] += 1

class MarketData:
    def get_best_price(self, symbol):
        return random.uniform(40000, 60000)  # Precio volátil

    def get_atr(self, symbol, exchange_name):
        return random.uniform(0.01, 0.1)  # ATR simulado con volatilidad alta

    def get_order_book_data(self, symbol, exchange_name):
        price = self.get_best_price(symbol)
        return {"bid": price * 0.99, "ask": price * 1.01}

class RiskManager:
    def calculate_position_size(self, capital, price, atr):
        return (capital * 0.02) / (price * atr) if price > 0 else 0

    def apply_stop_loss(self, price, side, atr):
        return price * (1 - atr) if side == "buy" else price * (1 + atr)

    def apply_trailing_stop(self, price, current_price, side, atr):
        return price * (1 - atr / 2) if side == "buy" else price * (1 + atr / 2)

class SlippageController:
    def __init__(self, max_slippage=0.001):
        self.max_slippage = max_slippage

    def validate_slippage(self, entry_price, execution_price, liquidity):
        slippage = abs(execution_price - entry_price) / entry_price
        return slippage <= self.max_slippage * (1 + liquidity / entry_price)

class FailoverHandler:
    def __init__(self, retry_attempts=3):
        self.retries = retry_attempts

    async def execute_with_failover(self, coro):
        for attempt in range(self.retries + 1):
            try:
                result = await coro()
                return True, result
            except Exception as e:
                logger.warning(f"Fallo en intento {attempt + 1}/{self.retries + 1}: {e}")
                if attempt == self.retries:
                    return False, str(e)
                await asyncio.sleep(1)

# OrderManager Mejorado
class OrderManager:
    def __init__(self,
                 exchange_manager: ExchangeManager,
                 market_data: MarketData,
                 risk_manager: RiskManager,
                 slippage_controller: SlippageController,
                 failover_handler: FailoverHandler,
                 capital: float):
        self.exchange_manager = exchange_manager
        self.market_data = market_data
        self.risk_manager = risk_manager
        self.slippage_controller = slippage_controller
        self.failover_handler = failover_handler
        self.capital = capital
        self.open_orders: Dict[str, Any] = {}
        self.executor = ThreadPoolExecutor(max_workers=20)  # Para concurrencia
        self.volatility_threshold = 0.05  # Pausar si ATR > 5%
        self.lock = asyncio.Lock()  # Evitar condiciones de carrera

    async def place_order(self,
                          symbol: str,
                          side: str,
                          strategy_name: str,
                          base_currency: str = "USDT") -> Dict[str, Any]:
        # Validación de entrada
        if not symbol or side not in ["buy", "sell"] or self.capital <= 0:
            return {"status": "error", "message": "Parámetros inválidos"}

        exchange_name = self.exchange_manager.get_best_exchange(symbol)
        if not exchange_name:
            return {"status": "error", "message": "No suitable exchange found"}

        client = self.exchange_manager.exchanges[exchange_name]

        # Obtener datos de mercado
        price = await asyncio.to_thread(self.market_data.get_best_price, symbol)
        atr = await asyncio.to_thread(self.market_data.get_atr, symbol, exchange_name)

        if not price or not atr or price <= 0:
            return {"status": "error", "message": "Invalid market data"}

        # Pausar en volatilidad extrema
        if atr > self.volatility_threshold:
            logger.critical(f"Volatilidad extrema (ATR: {atr}). Pausando órdenes.")
            return {"status": "paused", "reason": "Volatilidad extrema"}

        size = self.risk_manager.calculate_position_size(self.capital, price, atr)
        stop_loss = self.risk_manager.apply_stop_loss(price, side, atr)
        trailing_stop = self.risk_manager.apply_trailing_stop(price, price, side, atr)

        async def execute_trade():
            return await client.place_order(symbol=symbol, side=side, amount=size, price=price)

        success, result = await self.failover_handler.execute_with_failover(execute_trade)

        if not success:
            self.exchange_manager.report_failure(exchange_name)
            return {"status": "error", "message": result}

        execution_price = result.get("executed_price", price)
        order_id = result.get("order_id", "unknown")

        # Validación de slippage
        order_book = self.market_data.get_order_book_data(symbol, exchange_name)
        liquidity = max(order_book.get("bid", 1), order_book.get("ask", 1))
        if not self.slippage_controller.validate_slippage(price, execution_price, liquidity):
            logger.warning(f"Slippage alto. Cancelando orden {order_id}")
            await client.cancel_order(order_id)
            return {"status": "error", "message": "Slippage demasiado alto"}

        # Guardar orden con lock para concurrencia
        async with self.lock:
            self.open_orders[order_id] = {
                "symbol": symbol,
                "exchange": exchange_name,
                "side": side,
                "amount": size,
                "entry_price": execution_price,
                "stop_loss": stop_loss,
                "trailing_stop": trailing_stop,
                "strategy": strategy_name,
                "status": "open"
            }

        logger.info(f"Orden ejecutada: {self.open_orders[order_id]}")
        return {"status": "success", "order": self.open_orders[order_id]}

    async def monitor_trailing_stops(self):
        """Monitorea y ajusta trailing stops en tiempo real."""
        while True:
            async with self.lock:
                for order_id, order in list(self.open_orders.items()):
                    if order["status"] != "open":
                        continue
                    current_price = self.market_data.get_best_price(order["symbol"])
                    atr = self.market_data.get_atr(order["symbol"], order["exchange"])
                    new_trailing = self.risk_manager.apply_trailing_stop(
                        order["entry_price"], current_price, order["side"], atr
                    )
                    if (order["side"] == "buy" and current_price < new_trailing) or \
                       (order["side"] == "sell" and current_price > new_trailing):
                        logger.info(f"Cerrando orden {order_id} por trailing stop.")
                        await self.cancel_order(order_id)
                    else:
                        order["trailing_stop"] = new_trailing
            await asyncio.sleep(1)

    def get_open_orders(self) -> Dict[str, Any]:
        return self.open_orders

    async def cancel_order(self, order_id: str) -> bool:
        order = self.open_orders.get(order_id)
        if not order or order["status"] != "open":
            return False

        exchange_name = order["exchange"]
        client = self.exchange_manager.exchanges[exchange_name]
        await client.cancel_order(order_id)
        async with self.lock:
            order["status"] = "cancelled"
        logger.info(f"Orden cancelada: {order_id}")
        return True

    def update_capital(self, new_capital: float):
        if new_capital < 0:
            raise ValueError("Capital no puede ser negativo")
        self.capital = new_capital
        logger.info(f"Capital actualizado: ${new_capital:.2f}")

    async def stress_test(self, num_orders: int):
        tasks = [
            self.place_order("BTC/USDT", random.choice(["buy", "sell"]), "sma_crossover")
            for _ in range(num_orders)
        ]
        results = await asyncio.gather(*tasks)
        return results

# Prueba
if __name__ == "__main__":
    exchange_manager = ExchangeManager()
    market_data = MarketData()
    risk_manager = RiskManager()
    slippage_controller = SlippageController()
    failover_handler = FailoverHandler()
    order_manager = OrderManager(exchange_manager, market_data, risk_manager,
                                 slippage_controller, failover_handler, 10000)

    # Iniciar monitoreo de trailing stops
    asyncio.create_task(order_manager.monitor_trailing_stops())

    # Prueba simple
    result = asyncio.run(order_manager.place_order("BTC/USDT", "buy", "sma_crossover"))
    print("Prueba simple:", result)

    # Prueba de estrés
    print("\nIniciando prueba de estrés...")
    stress_results = asyncio.run(order_manager.stress_test(100))
    successes = sum(1 for r in stress_results if r["status"] == "success")
    print(f"Prueba de estrés completada: {successes}/100 operaciones exitosas")












