import logging
import asyncio
import time
from typing import Dict, List, Any, Optional, Union
from dataclasses import dataclass
from decimal import Decimal
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
from concurrent.futures import ThreadPoolExecutor

# Constantes de configuración
CONFIG = {
    'CAPITAL_BASE_POR_DEFECTO': 10000.0,
    'UMBRAL_EFICIENCIA': 0.85,
    'MAX_SIMBOLOS': {'pequeño': 5, 'grande': 15},
    'TIEMPOS': ["15m", "1h", "4h", "1d"],
    'INTERVALO_REASIGNACION_HORAS': 6,
    'SATURACION_POR_DEFECTO': 1000000.0
}

@dataclass
class MetricasInstrumento:
    """Clase de datos para métricas de instrumentos"""
    capital_mercado: float = 0.0
    volumen_24h: float = 0.0
    puntaje_liquidez: float = 0.5
    puntaje_final: float = 0.5
    precio_actual: float = 0.0

class CapitalScalingManager:
    """Gestor de escalabilidad de capital mejorado con mejor rendimiento y manejo de errores"""
    
    def __init__(self, capital_inicial: float = CONFIG['CAPITAL_BASE_POR_DEFECTO'], 
                 umbral_eficiencia: float = CONFIG['UMBRAL_EFICIENCIA']):
        # Validar capital inicial no negativo
        self.capital_inicial = max(0.0, capital_inicial)
        # Asegurar que el umbral esté entre 0 y 1
        self.umbral_eficiencia = min(1.0, max(0.0, umbral_eficiencia))
        self.logger = setup_logging("genesis.strategy.capital_scaling")
        
        # Estructuras de datos optimizadas
        self.registros_eficiencia: Dict[str, Dict[float, float]] = {}
        self.puntos_saturacion: Dict[str, float] = {}
        self.historial_distribucion: List[Dict[str, Any]] = []
        
        # Pool de hilos para cálculos intensivos
        self.executor = ThreadPoolExecutor(max_workers=4)
        
        self.metricas_rendimiento = {
            "eficiencia_promedio": 1.0,
            "utilizacion_capital": 1.0,
            "factor_escala": 1.0,
            "entropia_asignacion": 0.0,
            "registros_distribucion": 0,
            "ultima_actualizacion": datetime.now()
        }
        
        self.logger.info(f"Inicializado con capital: ${self.capital_inicial:,.2f}")

    async def calculate_optimal_allocation(
        self,
        capital_disponible: float,
        instrumentos: List[str],
        metricas: Dict[str, MetricasInstrumento]
    ) -> Dict[str, float]:
        """Calcular distribución óptima de capital con manejo de errores mejorado"""
        try:
            capital_disponible = max(0.0, capital_disponible)
            if not instrumentos or capital_disponible <= 0:
                self.logger.warning("Entrada inválida para asignación")
                return {}

            factor_escala = max(1.0, capital_disponible / self.capital_inicial)
            max_instrumentos = self._calcular_max_instrumentos(factor_escala)
            
            # Selección eficiente de instrumentos
            instrumentos_seleccionados = instrumentos[:max_instrumentos]
            
            # Cálculo paralelo de puntos de saturación
            tareas_saturacion = [
                self._estimate_saturation_point(simbolo, metricas.get(simbolo, MetricasInstrumento()))
                for simbolo in instrumentos_seleccionados
            ]
            resultados_saturacion = await asyncio.gather(*tareas_saturacion)
            self.puntos_saturacion.update(dict(zip(instrumentos_seleccionados, resultados_saturacion)))

            # Cálculo optimizado de asignaciones
            asignaciones = await self._calcular_asignaciones(
                capital_disponible, instrumentos_seleccionados
            )
            
            # Actualizar métricas
            self._actualizar_metricas_rendimiento(capital_disponible, asignaciones)
            self._registrar_distribucion(capital_disponible, factor_escala, asignaciones)
            
            return asignaciones
            
        except Exception as e:
            self.logger.error(f"Falló el cálculo de asignación: {e}")
            return {}

    async def _calcular_asignaciones(
        self, capital: float, instrumentos: List[str]
    ) -> Dict[str, float]:
        """Cálculo optimizado de asignaciones"""
        saturacion_total = sum(self.puntos_saturacion.get(s, CONFIG['SATURACION_POR_DEFECTO']) 
                              for s in instrumentos)
        
        asignaciones = {}
        restante = capital
        
        # Primera pasada: Asignación proporcional inicial
        for simbolo in instrumentos:
            peso = self.puntos_saturacion.get(simbolo, CONFIG['SATURACION_POR_DEFECTO']) / saturacion_total
            asignacion = min(capital * peso, self.puntos_saturacion[simbolo])
            asignaciones[simbolo] = asignacion
            restante -= asignacion
        
        # Segunda pasada: Distribuir capital restante
        if restante > 0:
            no_saturados = [s for s in instrumentos 
                          if asignaciones[s] < self.puntos_saturacion[simbolo]]
            if no_saturados:
                por_simbolo = restante / len(no_saturados)
                for simbolo in no_saturados:
                    asignaciones[simbolo] = min(
                        asignaciones[simbolo] + por_simbolo,
                        self.puntos_saturacion[simbolo]
                    )
        
        return asignaciones

    def _calcular_max_instrumentos(self, factor_escala: float) -> int:
        """Calcular número máximo de instrumentos según factor de escala"""
        return int(
            CONFIG['MAX_SIMBOLOS']['pequeño'] + 
            min(10, (CONFIG['MAX_SIMBOLOS']['grande'] - CONFIG['MAX_SIMBOLOS']['pequeño']) * 
                np.log10(max(1, factor_escala)))
        )

    async def _estimate_saturation_point(
        self, simbolo: str, metricas: MetricasInstrumento
    ) -> float:
        """Estimación mejorada del punto de saturación con caché"""
        if simbolo in self.puntos_saturacion:
            return self.puntos_saturacion[simbolo]

        try:
            saturacion_base = await asyncio.get_event_loop().run_in_executor(
                self.executor,
                self._calcular_saturacion_base,
                metricas.capital_mercado,
                metricas.volumen_24h
            )
            
            factor_liquidez = max(0.1, min(1.0, metricas.puntaje_liquidez))
            saturacion = max(10000.0, min(10000000.0, saturacion_base * factor_liquidez))
            
            self.puntos_saturacion[simbolo] = saturacion
            return saturacion
        except Exception as e:
            self.logger.warning(f"Falló estimación de saturación para {simbolo}: {e}")
            return CONFIG['SATURACION_POR_DEFECTO']

    @staticmethod
    def _calcular_saturacion_base(capital_mercado: float, volumen_24h: float) -> float:
        """Cálculo intensivo de saturación base"""
        if capital_mercado > 0 and volumen_24h > 0:
            return min(capital_mercado * 0.0001, volumen_24h * 0.001)
        return 50000.0 if volumen_24h <= 0 else volumen_24h * 0.001

    def _actualizar_metricas_rendimiento(self, capital: float, asignaciones: Dict[str, float]) -> None:
        """Actualizar métricas de rendimiento eficientemente"""
        utilizado = sum(asignaciones.values())
        self.metricas_rendimiento.update({
            "utilizacion_capital": utilizado / capital if capital > 0 else 0.0,
            "factor_escala": capital / self.capital_inicial,
            "ultima_actualizacion": datetime.now()
        })

class AdaptiveScalingStrategy(Strategy):
    """Estrategia de escalabilidad adaptativa mejorada"""
    
    def __init__(self, nombre: str = "adaptive_scaling_strategy",
                 capital_inicial: float = CONFIG['CAPITAL_BASE_POR_DEFECTO'],
                 max_simbolos: int = CONFIG['MAX_SIMBOLOS']['grande'],
                 tiempos: Optional[List[str]] = None):
        super().__init__(nombre)
        self.logger = setup_logging(f"strategy.{nombre}")
        
        # Validar entradas
        self.capital_inicial = max(0.0, capital_inicial)
        self.capital_actual = self.capital_inicial
        self.max_simbolos = max(1, max_simbolos)
        self.tiempos = tiempos or CONFIG['TIEMPOS'].copy()
        
        self.gestor_escalado = CapitalScalingManager(self.capital_inicial)
        self.intervalo_reasignacion = timedelta(hours=CONFIG['INTERVALO_REASIGNACION_HORAS'])
        
        # Usar diccionarios para búsqueda eficiente
        self.posiciones_activas: Dict[str, Dict[str, Any]] = {}
        self.capital_asignado: Dict[str, float] = {}
        
        # Inicializar estado
        self._reiniciar_estado()

    def _reiniciar_estado(self) -> None:
        """Reiniciar estado interno"""
        self.tiempo_ultima_asignacion = datetime.now() - self.intervalo_reasignacion
        self.tiempo_ultima_actualizacion = datetime.now()
        self.cache_datos_mercado = {}
        self.criptos_calientes = {}
        self.estadisticas = {
            "señales_totales": 0,
            "señales_compra": 0,
            "señales_venta": 0,
            "señales_mantener": 0,
            "eventos_asignacion": 0,
            "eventos_rebalanceo": 0,
            "operaciones_totales": 0,
            "errores": 0
        }

    async def start(self) -> None:
        """Iniciar estrategia con manejo de errores adecuado"""
        try:
            self.logger.info(f"Iniciando estrategia: {self.nombre}")
            
            # Inicialización perezosa de componentes
            if not self.risk_manager:
                self.risk_manager = AdaptiveRiskManager(
                    capital_inicial=self.capital_inicial,
                    max_drawdown_permitido=0.15,
                    volatilidad_base=0.02,
                    capital_allocation_method="adaptive"
                )
            
            if not self.crypto_classifier:
                self.crypto_classifier = TranscendentalCryptoClassifier(
                    capital_inicial=self.capital_inicial
                )
            
            await super().start()
            
            # Lanzar tareas de fondo con manejo de errores
            asyncio.create_task(self._ejecutar_tarea_fondo(
                self._actualizar_capital_fondo, "Actualización Capital"))
            asyncio.create_task(self._ejecutar_tarea_fondo(
                self._monitoreo_mercado_fondo, "Monitoreo Mercado"))
            
        except Exception as e:
            self.logger.error(f"Falló inicio de estrategia: {e}")
            self.estadisticas["errores"] += 1
            raise

    async def _ejecutar_tarea_fondo(self, funcion_tarea, nombre_tarea: str) -> None:
        """Ejecutar tarea de fondo con manejo de errores"""
        while self.running:
            try:
                await funcion_tarea()
            except Exception as e:
                self.logger.error(f"Tarea de fondo {nombre_tarea} falló: {e}")
                self.estadisticas["errores"] += 1
                await asyncio.sleep(60)  # Retroceso en caso de error

    # ... (métodos restantes con mejoras similares)